/**
 * Connections Module v2.0 - –°–≤—è–∑–∏ –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π
 * 
 * –ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ v2.0:
 * - –°–≤—è–∑–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏ (–Ω–µ —Å—Å—ã–ª–∫–∞–º–∏)
 * - –°–≤—è–∑–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤–æ –≤—Å–µ—Ö —Ä–æ–ª—è—Ö, –≥–¥–µ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏
 * - –ü–æ–∑–∏—Ü–∏–∏ —Å–≤—è–∑–µ–π –∞–¥–∞–ø—Ç–∏—Ä—É—é—Ç—Å—è –∫ –ø–æ–∑–∏—Ü–∏—è–º —Å—Å—ã–ª–æ–∫ –≤ –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏
 */
export class ConnectionsModule {
    constructor(state, events) {
        this.state = state;
        this.events = events;
        this.canvas = document.querySelector('.canvas');
        this.connectionsLayer = null;
        this.isConnecting = false;
        this.connectingFrom = null;
        this.tempLine = null;
        this.currentContext = null;
        
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
     */
    init() {
        this.createConnectionsLayer();
        this.setupEventListeners();
        this.setupStateWatchers();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Å–∏–≤ —Å–≤—è–∑–µ–π –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!this.state.get('connections')) {
            this.state.set('connections', []);
        }
        
        console.log('üîó Connections module v2.0 initialized');
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å —Å–ª–æ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≤—è–∑–µ–π
     */
    createConnectionsLayer() {
        this.connectionsLayer = document.createElement('div');
        this.connectionsLayer.className = 'connections-layer';
        this.connectionsLayer.style.cssText = `
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 5;
        `;
        
        this.canvas.appendChild(this.connectionsLayer);
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç StateManager
        
        // –°–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫–æ–≤ –∏ —Å—Å—ã–ª–æ–∫ - –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–≤—è–∑–∏
        this.events.on('block:created', () => this.renderConnections());
        this.events.on('reference:created', () => this.renderConnections());
        
        // –°–æ–±—ã—Ç–∏—è —É–¥–∞–ª–µ–Ω–∏—è –±–ª–æ–∫–æ–≤ - —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º
        this.events.on('block:deleted', (data) => {
            this.handleBlockDeleted(data.blockId);
        });
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–±—ã—Ç–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ - —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–≤—è–∑–∏
        this.events.on('reference:deleted', () => {
            this.renderConnections();
        });

        // –°–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–æ–≤ –∏ —Å—Å—ã–ª–æ–∫ - –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–≤—è–∑–∏  
        this.events.on('block:updated', () => this.renderConnections());
        this.events.on('reference:updated', () => this.renderConnections());

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–æ–±—ã—Ç–∏—è
        // –°–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è - –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–≤—è–∑–∏
        this.events.on('note:drag-move', () => this.renderConnections());

        // –°–æ–±—ã—Ç–∏—è –æ—Ç —Å–∏—Å—Ç–µ–º—ã –≤–∫–ª–∞–¥–æ–∫
        this.events.on('tab:context-changed', (context) => {
            this.handleContextChange(context);
        });

        // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–µ–π
        document.addEventListener('keydown', (e) => {
            // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            if (document.querySelector('.modal-overlay, .role-modal-overlay.visible')) {
                return;
            }
            
            if (e.key === 'c' && (e.ctrlKey || e.metaKey)) {
                e.preventDefault();
                this.startConnectionMode();
            }
        });

        // –ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É –≤ —Ä–µ–∂–∏–º–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        this.canvas.addEventListener('click', (e) => {
            if (this.isConnecting) {
                const noteElement = e.target.closest('.note');
                if (noteElement) {
                    const blockId = this.getBlockIdFromElement(noteElement);
                    if (blockId) {
                        this.handleBlockClick(blockId, noteElement);
                    }
                }
            }
        });

        // –û—Ç–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ Escape
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.isConnecting) {
                this.cancelConnectionMode();
            }
        });

        // –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–≤—è–∑–µ–π
        this.events.on('connections:stats-request', () => {
            this.showConnectionsStats();
        });
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å ID –±–ª–æ–∫–∞ –∏–∑ DOM —ç–ª–µ–º–µ–Ω—Ç–∞
     * @param {HTMLElement} element - DOM —ç–ª–µ–º–µ–Ω—Ç –∑–∞–º–µ—Ç–∫–∏
     * @returns {string|null} - ID –±–ª–æ–∫–∞
     */
    getBlockIdFromElement(element) {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å ID –±–ª–æ–∫–∞ (–¥–ª—è —Å—Å—ã–ª–æ–∫)
        const blockId = element.getAttribute('data-block-id');
        if (blockId) {
            return blockId;
        }
        
        // –ó–∞—Ç–µ–º –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å ID –∑–∞–º–µ—Ç–∫–∏ (–¥–ª—è –±–ª–æ–∫–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –¥–µ—Ä–µ–≤–µ)
        const noteId = element.getAttribute('data-note-id');
        const isReference = element.getAttribute('data-is-reference') === 'true';
        
        if (!isReference && noteId) {
            return noteId;
        }
        
        return null;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–∫–ª–∞–¥–∫–∏
     * @param {Object} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∫–ª–∞–¥–∫–∏
     */
    handleContextChange(context) {
        this.currentContext = context;
        
        // –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ –≤–∫–ª–∞–¥–∫–∏
        if (this.isConnecting) {
            this.cancelConnectionMode();
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å —Å–≤—è–∑–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        setTimeout(() => {
            this.renderConnections();
        }, 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    setupStateWatchers() {
        this.state.watch('connections', () => {
            this.renderConnections();
        });

        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–≤—è–∑–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ö–æ–ª—Å—Ç–∞
        this.state.watch('canvas.transform', () => {
            this.renderConnections();
        });

        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø—Ä–∏ —Å–º–µ–Ω–µ –≤–∫–ª–∞–¥–∫–∏
        this.state.watch('ui.activeTab', () => {
            // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            setTimeout(() => {
                this.renderConnections();
            }, 50);
        });
    }

    /**
     * –ù–∞—á–∞—Ç—å —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–µ–π
     */
    startConnectionMode() {
        if (this.isConnecting) return;
        
        this.isConnecting = true;
        this.connectingFrom = null;
        
        // –î–æ–±–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
        const container = document.querySelector('.canvas-container');
        if (container) {
            container.classList.add('connection-mode');
        }
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        const activeTab = this.state.get('ui.activeTab');
        let message = '–†–µ–∂–∏–º —Å–≤—è–∑–∏: –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –ø–µ—Ä–≤—ã–π –±–ª–æ–∫, –∑–∞—Ç–µ–º –Ω–∞ –≤—Ç–æ—Ä–æ–π. ESC –¥–ª—è –æ—Ç–º–µ–Ω—ã.';
        
        if (activeTab !== 'main') {
            message += ' –°–≤—è–∑–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏, –Ω–µ —Å—Å—ã–ª–∫–∞–º–∏.';
        }
        
        this.showMessage(message);
        
        // –ü–æ–¥—Å–≤–µ—Ç–∏—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        document.querySelectorAll('.note').forEach(note => {
            note.style.boxShadow = '0 0 10px #4285f4';
        });
    }

    /**
     * –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–µ–π
     */
    cancelConnectionMode() {
        this.isConnecting = false;
        this.connectingFrom = null;
        
        const container = document.querySelector('.canvas-container');
        if (container) {
            container.classList.remove('connection-mode');
        }
        
        // –£–±—Ä–∞—Ç—å –ø–æ–¥—Å–≤–µ—Ç–∫—É
        document.querySelectorAll('.note').forEach(note => {
            note.style.boxShadow = '';
        });
        
        // –£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –ª–∏–Ω–∏—é
        if (this.tempLine) {
            this.tempLine.remove();
            this.tempLine = null;
        }
        
        this.showMessage('–†–µ–∂–∏–º —Å–≤—è–∑–∏ –æ—Ç–º–µ–Ω–µ–Ω', 'info', 1500);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –±–ª–æ–∫—É –≤ —Ä–µ–∂–∏–º–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     * @param {string} blockId - ID –±–ª–æ–∫–∞
     * @param {HTMLElement} element - DOM —ç–ª–µ–º–µ–Ω—Ç
     */
    handleBlockClick(blockId, element) {
        if (!this.connectingFrom) {
            // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –±–ª–æ–∫
            this.connectingFrom = blockId;
            this.highlightElement(element, '#4285f4');
            this.showMessage('–¢–µ–ø–µ—Ä—å –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –≤—Ç–æ—Ä–æ–π –±–ª–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∏');
        } else if (this.connectingFrom === blockId) {
            // –ö–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ —Ç–æ—Ç –∂–µ –±–ª–æ–∫ - –æ—Ç–º–µ–Ω–∞
            this.cancelConnectionMode();
        } else {
            // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏
            this.createConnection(this.connectingFrom, blockId);
            this.cancelConnectionMode();
        }
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å —Å–≤—è–∑—å –º–µ–∂–¥—É –¥–≤—É–º—è –±–ª–æ–∫–∞–º–∏
     * @param {string} fromBlockId - ID –ø–µ—Ä–≤–æ–≥–æ –±–ª–æ–∫–∞
     * @param {string} toBlockId - ID –≤—Ç–æ—Ä–æ–≥–æ –±–ª–æ–∫–∞
     * @returns {Object|null} - –°–æ–∑–¥–∞–Ω–Ω–∞—è —Å–≤—è–∑—å –∏–ª–∏ null
     */
    createConnection(fromBlockId, toBlockId) {
        const connections = this.state.get('connections');
        
        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –±–ª–æ–∫–∏
        const blocks = this.state.get('blocks');
        const fromBlock = blocks.find(b => b.id === fromBlockId);
        const toBlock = blocks.find(b => b.id === toBlockId);
        
        if (!fromBlock || !toBlock) {
            this.showMessage('–û–¥–∏–Ω –∏–∑ –±–ª–æ–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω!', 'error');
            return null;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Å–≤—è–∑—å
        const exists = connections.some(conn => 
            (conn.from === fromBlockId && conn.to === toBlockId) ||
            (conn.from === toBlockId && conn.to === fromBlockId)
        );
        
        if (exists) {
            this.showMessage('–°–≤—è–∑—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!', 'warning');
            return null;
        }
        
        const connection = {
            id: this.generateId(),
            from: fromBlockId,
            to: toBlockId,
            createdAt: Date.now()
        };
        
        this.state.update('connections', (connections) => [...connections, connection]);
        this.showMessage('–°–≤—è–∑—å —Å–æ–∑–¥–∞–Ω–∞!', 'success', 1500);
        
        this.events.emit('connection:created', connection);
        return connection;
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å —Å–≤—è–∑—å
     * @param {string} connectionId - ID —Å–≤—è–∑–∏
     */
    deleteConnection(connectionId) {
        const connections = this.state.get('connections');
        const connection = connections.find(c => c.id === connectionId);
        
        this.state.update('connections', (connections) =>
            connections.filter(conn => conn.id !== connectionId)
        );
        
        this.events.emit('connection:deleted', { connectionId, connection });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–ª–æ–∫–∞
     * @param {string} blockId - ID —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞
     */
    handleBlockDeleted(blockId) {
        const connections = this.state.get('connections');
        const toDelete = connections.filter(conn => 
            conn.from === blockId || conn.to === blockId
        );
        
        if (toDelete.length > 0) {
            this.state.update('connections', (connections) =>
                connections.filter(conn => 
                    conn.from !== blockId && conn.to !== blockId
                )
            );
            
            this.showMessage(`–£–¥–∞–ª–µ–Ω–æ —Å–≤—è–∑–µ–π: ${toDelete.length}`, 'info', 2000);
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–µ–π –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è
        this.renderConnections();
    }

    /**
     * –û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –≤—Å–µ —Å–≤—è–∑–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
     */
    renderConnections() {
        if (!this.connectionsLayer) return;
        
        // –û—á–∏—Å—Ç–∏—Ç—å —Å–ª–æ–π
        this.connectionsLayer.innerHTML = '';
        
        const connections = this.state.get('connections');
        const visibleElements = this.getVisibleElements();
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if (this.state.get('settings.debugMode')) {
            console.log(`üîó Rendering connections:`, {
                totalConnections: connections.length,
                visibleElements: visibleElements.size,
                activeTab: this.state.get('ui.activeTab')
            });
        }
        
        connections.forEach(connection => {
            const fromElement = visibleElements.get(connection.from);
            const toElement = visibleElements.get(connection.to);
            
            // –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å–≤—è–∑—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±–∞ –±–ª–æ–∫–∞ –≤–∏–¥–Ω—ã –≤ —Ç–µ–∫—É—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            if (fromElement && toElement) {
                this.renderConnection(connection, fromElement, toElement);
            }
        });
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤–∏–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Ç–µ–∫—É—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
     * @returns {Map} - Map —Å ID –±–ª–æ–∫–∞ -> DOM —ç–ª–µ–º–µ–Ω—Ç
     */
    getVisibleElements() {
        const visibleElements = new Map();
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∏—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        const notes = this.canvas.querySelectorAll('.note');
        
        notes.forEach(element => {
            const blockId = this.getBlockIdFromElement(element);
            if (blockId) {
                visibleElements.set(blockId, element);
            }
        });
        
        return visibleElements;
    }

    /**
     * –û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –æ–¥–Ω—É —Å–≤—è–∑—å
     * @param {Object} connection - –û–±—ä–µ–∫—Ç —Å–≤—è–∑–∏
     * @param {HTMLElement} fromElement - DOM —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–≤–æ–≥–æ –±–ª–æ–∫–∞/—Å—Å—ã–ª–∫–∏
     * @param {HTMLElement} toElement - DOM —ç–ª–µ–º–µ–Ω—Ç –≤—Ç–æ—Ä–æ–≥–æ –±–ª–æ–∫–∞/—Å—Å—ã–ª–∫–∏
     */
    renderConnection(connection, fromElement, toElement) {
        // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const fromRect = fromElement.getBoundingClientRect();
        const toRect = toElement.getBoundingClientRect();
        const canvasRect = this.canvas.getBoundingClientRect();
        
        // –í—ã—á–∏—Å–ª–∏—Ç—å —Ü–µ–Ω—Ç—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ö–æ–ª—Å—Ç–∞
        const fromCenter = {
            x: fromRect.left + fromRect.width / 2 - canvasRect.left,
            y: fromRect.top + fromRect.height / 2 - canvasRect.top
        };
        
        const toCenter = {
            x: toRect.left + toRect.width / 2 - canvasRect.left,
            y: toRect.top + toRect.height / 2 - canvasRect.top
        };
        
        // –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–≤—è–∑–∏
        const connectionElement = document.createElement('div');
        connectionElement.className = 'connection';
        connectionElement.setAttribute('data-connection-id', connection.id);
        
        // –°–æ–∑–¥–∞—Ç—å SVG –¥–ª—è –ª–∏–Ω–∏–∏
        const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
        svg.setAttribute('width', '100%');
        svg.setAttribute('height', '100%');
        svg.style.cssText = `
            position: absolute;
            top: 0;
            left: 0;
            pointer-events: none;
            z-index: 5;
        `;
        
        const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
        line.setAttribute('x1', fromCenter.x);
        line.setAttribute('y1', fromCenter.y);
        line.setAttribute('x2', toCenter.x);
        line.setAttribute('y2', toCenter.y);
        
        // –°—Ç–∏–ª–∏ –ª–∏–Ω–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        const activeTab = this.state.get('ui.activeTab');
        if (activeTab === 'main') {
            // –í –æ—Å–Ω–æ–≤–Ω–æ–º –¥–µ—Ä–µ–≤–µ - –æ–±—ã—á–Ω–∞—è –ª–∏–Ω–∏—è
            line.setAttribute('stroke', '#4285f4');
            line.setAttribute('stroke-width', '2');
            line.setAttribute('stroke-dasharray', '5,5');
        } else {
            // –í —Ä–æ–ª—è—Ö - –¥—Ä—É–≥–æ–π —Å—Ç–∏–ª—å –¥–ª—è —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è
            line.setAttribute('stroke', '#34a853');
            line.setAttribute('stroke-width', '2');
            line.setAttribute('stroke-dasharray', '8,4');
        }
        
        line.setAttribute('opacity', '0.8');
        
        svg.appendChild(line);
        
        // –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ
        const midX = (fromCenter.x + toCenter.x) / 2;
        const midY = (fromCenter.y + toCenter.y) / 2;
        
        const deleteBtn = document.createElement('div');
        deleteBtn.className = 'connection-delete-btn';
        deleteBtn.style.cssText = `
            position: absolute;
            left: ${midX - 12}px;
            top: ${midY - 12}px;
            width: 24px;
            height: 24px;
            background: #ea4335;
            color: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
            font-weight: bold;
            cursor: pointer;
            pointer-events: auto;
            opacity: 0;
            transition: all 0.2s;
            z-index: 10;
            border: 2px solid white;
            box-shadow: 0 2px 8px rgba(0,0,0,0.2);
        `;
        deleteBtn.innerHTML = '√ó';
        deleteBtn.title = '–£–¥–∞–ª–∏—Ç—å —Å–≤—è–∑—å';
        
        deleteBtn.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            if (confirm('–£–¥–∞–ª–∏—Ç—å —Å–≤—è–∑—å?')) {
                this.deleteConnection(connection.id);
            }
        });
        
        // –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å –¥–ª—è –Ω–∞–≤–µ–¥–µ–Ω–∏—è
        const hoverArea = this.createHoverArea(fromCenter, toCenter);
        
        // –õ–æ–≥–∏–∫–∞ –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        let isHovering = false;
        
        const showDeleteBtn = () => {
            isHovering = true;
            deleteBtn.style.opacity = '1';
            line.setAttribute('stroke-width', '3');
            line.style.filter = 'drop-shadow(0 0 4px rgba(66, 133, 244, 0.5))';
        };
        
        const hideDeleteBtn = () => {
            isHovering = false;
            setTimeout(() => {
                if (!isHovering) {
                    deleteBtn.style.opacity = '0';
                    line.setAttribute('stroke-width', '2');
                    line.style.filter = 'none';
                }
            }, 100);
        };
        
        // –°–æ–±—ã—Ç–∏—è –¥–ª—è hover –æ–±–ª–∞—Å—Ç–∏
        hoverArea.addEventListener('mouseenter', showDeleteBtn);
        hoverArea.addEventListener('mouseleave', hideDeleteBtn);
        
        // –°–æ–±—ã—Ç–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        deleteBtn.addEventListener('mouseenter', () => {
            isHovering = true;
            deleteBtn.style.transform = 'scale(1.2)';
            deleteBtn.style.background = '#d33b2c';
        });
        
        deleteBtn.addEventListener('mouseleave', () => {
            deleteBtn.style.transform = 'scale(1)';
            deleteBtn.style.background = '#ea4335';
            hideDeleteBtn();
        });
        
        // –°–æ–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–≤—è–∑–∏
        connectionElement.appendChild(svg);
        connectionElement.appendChild(deleteBtn);
        connectionElement.appendChild(hoverArea);
        
        this.connectionsLayer.appendChild(connectionElement);
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –æ–±–ª–∞—Å—Ç—å –¥–ª—è –Ω–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ —Å–≤—è–∑—å
     * @param {Object} fromCenter - –¶–µ–Ω—Ç—Ä –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
     * @param {Object} toCenter - –¶–µ–Ω—Ç—Ä –≤—Ç–æ—Ä–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
     * @returns {HTMLElement} - –û–±–ª–∞—Å—Ç—å –¥–ª—è –Ω–∞–≤–µ–¥–µ–Ω–∏—è
     */
    createHoverArea(fromCenter, toCenter) {
        const hoverArea = document.createElement('div');
        
        // –í—ã—á–∏—Å–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–∏–Ω–∏–∏
        const lineLength = Math.sqrt(
            Math.pow(toCenter.x - fromCenter.x, 2) + 
            Math.pow(toCenter.y - fromCenter.y, 2)
        );
        const angle = Math.atan2(
            toCenter.y - fromCenter.y, 
            toCenter.x - fromCenter.x
        ) * (180 / Math.PI);
        
        hoverArea.style.cssText = `
            position: absolute;
            left: ${fromCenter.x}px;
            top: ${fromCenter.y - 10}px;
            width: ${lineLength}px;
            height: 20px;
            pointer-events: auto;
            z-index: 6;
            transform-origin: 0 50%;
            transform: rotate(${angle}deg);
        `;
        
        return hoverArea;
    }

    /**
     * –ü–æ–¥—Å–≤–µ—Ç–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç
     * @param {HTMLElement} element - DOM —ç–ª–µ–º–µ–Ω—Ç
     * @param {string} color - –¶–≤–µ—Ç –ø–æ–¥—Å–≤–µ—Ç–∫–∏
     */
    highlightElement(element, color) {
        element.style.boxShadow = `0 0 15px ${color}`;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     * @param {string} text - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param {string} type - –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param {number} duration - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞
     */
    showMessage(text, type = 'info', duration = 3000) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ UI –º–æ–¥—É–ª—è
        this.events.emit('ui:show-notification', { message: text, type, duration });
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–≤—è–∑–µ–π
     */
    showConnectionsStats() {
        const stats = this.getStats();
        const blocks = this.state.get('blocks');
        const roles = this.state.get('roles');
        
        const message = [
            `üîó –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–≤—è–∑–µ–π v2.0:`,
            ``,
            `üìä –í—Å–µ–≥–æ —Å–≤—è–∑–µ–π: ${stats.totalConnections}`,
            `üß± –ë–ª–æ–∫–æ–≤ —Å —Å–≤—è–∑—è–º–∏: ${stats.connectedBlocks}`,
            `üìÑ –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤: ${stats.isolatedBlocks}`,
            `üèÜ –ú–∞–∫—Å–∏–º—É–º —Å–≤—è–∑–µ–π —É –±–ª–æ–∫–∞: ${stats.mostConnected}`,
            `üìà –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–µ–π: ${stats.averageConnections}`,
            ``,
            `üë• –í–∏–¥–∏–º–æ—Å—Ç—å –≤ —Ä–æ–ª—è—Ö:`,
            Object.values(roles).map(role => {
                const visibleConnections = this.getVisibleConnectionsForRole(role.id);
                return `‚Ä¢ ${role.name}: ${visibleConnections} —Å–≤—è–∑–µ–π`;
            }).join('\n'),
            ``,
            `üí° –°–≤—è–∑–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏ –∏ –≤–∏–¥–Ω—ã –≤–æ –≤—Å–µ—Ö —Ä–æ–ª—è—Ö`
        ].join('\n');
        
        alert(message);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö —Å–≤—è–∑–µ–π –≤ —Ä–æ–ª–∏
     * @param {string} roleId - ID —Ä–æ–ª–∏
     * @returns {number} - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö —Å–≤—è–∑–µ–π
     */
    getVisibleConnectionsForRole(roleId) {
        const connections = this.state.get('connections');
        const role = this.state.get(`roles.${roleId}`);
        
        if (!role) return 0;
        
        const roleBlockIds = new Set(role.references.map(ref => ref.blockId));
        
        return connections.filter(conn => 
            roleBlockIds.has(conn.from) && roleBlockIds.has(conn.to)
        ).length;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–≤—è–∑–∏ –±–ª–æ–∫–∞
     * @param {string} blockId - ID –±–ª–æ–∫–∞
     * @returns {Array} - –ú–∞—Å—Å–∏–≤ —Å–≤—è–∑–µ–π
     */
    getBlockConnections(blockId) {
        const connections = this.state.get('connections');
        return connections.filter(conn => 
            conn.from === blockId || conn.to === blockId
        );
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏
     * @param {string} blockId - ID –±–ª–æ–∫–∞
     * @returns {Array} - –ú–∞—Å—Å–∏–≤ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤
     */
    getConnectedBlocks(blockId) {
        const connections = this.getBlockConnections(blockId);
        const blocks = this.state.get('blocks');
        
        return connections.map(conn => {
            const connectedId = conn.from === blockId ? conn.to : conn.from;
            return blocks.find(block => block.id === connectedId);
        }).filter(Boolean);
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç —Å–≤—è–∑–µ–π
     * @returns {Object} - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     */
    exportConnections() {
        return {
            connections: this.state.get('connections'),
            version: '2.0',
            timestamp: Date.now()
        };
    }

    /**
     * –ò–º–ø–æ—Ä—Ç —Å–≤—è–∑–µ–π
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
     */
    importConnections(data) {
        if (data.connections && Array.isArray(data.connections)) {
            this.state.set('connections', data.connections);
            this.showMessage('–°–≤—è–∑–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
        }
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–≤—è–∑–∏
     */
    clearAllConnections() {
        if (confirm('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–≤—è–∑–∏?')) {
            this.state.set('connections', []);
            this.showMessage('–í—Å–µ —Å–≤—è–∑–∏ —É–¥–∞–ª–µ–Ω—ã', 'info');
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID
     * @returns {string} - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
     */
    generateId() {
        return Date.now().toString(36) + Math.random().toString(36).substr(2);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–≤—è–∑–µ–π v2.0
     * @returns {Object} - –û–±—ä–µ–∫—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
     */
    getStats() {
        const connections = this.state.get('connections');
        const blocks = this.state.get('blocks');
        
        const blockConnections = new Map();
        connections.forEach(conn => {
            blockConnections.set(conn.from, (blockConnections.get(conn.from) || 0) + 1);
            blockConnections.set(conn.to, (blockConnections.get(conn.to) || 0) + 1);
        });
        
        const connectedBlocks = blockConnections.size;
        const isolatedBlocks = blocks.length - connectedBlocks;
        const mostConnected = Math.max(0, ...blockConnections.values());
        
        return {
            version: '2.0',
            totalConnections: connections.length,
            connectedBlocks,
            isolatedBlocks,
            mostConnected,
            averageConnections: connectedBlocks > 0 ? 
                (connections.length * 2 / connectedBlocks).toFixed(1) : 0,
            blockConnectionCounts: blockConnections
        };
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–æ–¥—É–ª—è
     */
    destroy() {
        if (this.connectionsLayer) {
            this.connectionsLayer.remove();
        }
        
        console.log('üóëÔ∏è Connections module v2.0 destroyed');
    }
}