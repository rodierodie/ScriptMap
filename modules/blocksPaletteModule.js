/**
 * Blocks Palette Module - –ü–∞–ª–∏—Ç—Ä–∞ –±–ª–æ–∫–æ–≤ –¥–ª—è –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏ —Ä–æ–ª–µ–π
 */
export class BlocksPaletteModule {
    constructor(state, events) {
        this.state = state;
        this.events = events;
        this.paletteContainer = null;
        this.isOpen = false;
        this.searchQuery = '';
        this.selectedTags = new Set();
        
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
     */
    init() {
        this.createPaletteContainer();
        this.setupEventListeners();
        this.setupStateWatchers();
        
        console.log('üé® Blocks Palette module initialized');
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–∞–ª–∏—Ç—Ä—ã
     */
    createPaletteContainer() {
        this.paletteContainer = document.createElement('div');
        this.paletteContainer.className = 'blocks-palette';
        this.paletteContainer.id = 'blocksPalette';
        
        this.paletteContainer.innerHTML = `
            <div class="palette-header">
                <div class="palette-title">–ü–∞–ª–∏—Ç—Ä–∞ –±–ª–æ–∫–æ–≤</div>
                <div class="palette-subtitle">–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Ö–æ–ª—Å—Ç</div>
            </div>
            
            <div class="palette-search">
                <input type="text" class="search-input" id="paletteSearch" 
                       placeholder="–ü–æ–∏—Å–∫ –±–ª–æ–∫–æ–≤...">
            </div>
            
            <div class="palette-filters" id="paletteFilters">
                <!-- –§–∏–ª—å—Ç—Ä—ã –ø–æ —Ç–µ–≥–∞–º –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
            </div>
            
            <div class="palette-content" id="paletteContent">
                <!-- –ë–ª–æ–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
            </div>
            
            <div class="palette-toggle" id="paletteToggle">‚óÄ</div>
        `;
        
        // –î–æ–±–∞–≤–∏—Ç—å –≤ main-content
        const mainContent = document.querySelector('.main-content');
        if (mainContent) {
            mainContent.insertBefore(this.paletteContainer, mainContent.firstChild);
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –ø–∞–ª–∏—Ç—Ä—ã
        const toggleBtn = document.getElementById('paletteToggle');
        toggleBtn.addEventListener('click', () => this.toggle());

        // –ü–æ–∏—Å–∫
        const searchInput = document.getElementById('paletteSearch');
        searchInput.addEventListener('input', (e) => {
            this.searchQuery = e.target.value.toLowerCase();
            this.renderBlocks();
        });

        // –°–æ–±—ã—Ç–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
        this.events.on('tab:context-changed', (context) => {
            this.handleContextChange(context);
        });

        this.events.on('block:created', () => this.renderBlocks());
        this.events.on('block:updated', () => this.renderBlocks());
        this.events.on('block:deleted', () => this.renderBlocks());

        // –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–ª–∏—Ç—Ä—É –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ —Ä–æ–ª–∏
        this.events.on('ui:add-reference-request', () => {
            this.open();
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    setupStateWatchers() {
        // –û–±–Ω–æ–≤–ª—è—Ç—å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–ª–æ–∫–æ–≤
        this.state.watch('blocks', () => {
            this.renderBlocks();
            this.updateFilters();
        });

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
        this.state.watch('ui.activeTab', (newTab) => {
            this.handleTabSwitch(newTab);
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–∫–ª–∞–¥–∫–∏
     * @param {Object} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∫–ª–∞–¥–∫–∏
     */
    handleContextChange(context) {
        if (context.canCreateReferences) {
            // –í —Ä–æ–ª–∏ - –ø–æ–∫–∞–∑–∞—Ç—å –ø–∞–ª–∏—Ç—Ä—É
            this.updatePaletteHeader(context.tabId);
            this.renderBlocks();
        } else {
            // –í –æ—Å–Ω–æ–≤–Ω–æ–º –¥–µ—Ä–µ–≤–µ - —Å–∫—Ä—ã—Ç—å –ø–∞–ª–∏—Ç—Ä—É
            this.close();
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
     * @param {string} tabId - ID –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏
     */
    handleTabSwitch(tabId) {
        if (tabId === 'main') {
            this.close();
        } else {
            this.updatePaletteHeader(tabId);
            this.renderBlocks();
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–ª–∏—Ç—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ä–æ–ª–∏
     * @param {string} roleId - ID —Ä–æ–ª–∏
     */
    updatePaletteHeader(roleId) {
        const role = this.state.get(`roles.${roleId}`);
        if (!role) return;

        const titleElement = this.paletteContainer.querySelector('.palette-title');
        const subtitleElement = this.paletteContainer.querySelector('.palette-subtitle');
        
        titleElement.textContent = `–ü–∞–ª–∏—Ç—Ä–∞ –¥–ª—è ${role.name}`;
        subtitleElement.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Ö–æ–ª—Å—Ç —Ä–æ–ª–∏';
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ª–∏—Ç—Ä—É
     */
    open() {
        this.isOpen = true;
        this.paletteContainer.classList.add('open');
        
        const toggleBtn = document.getElementById('paletteToggle');
        toggleBtn.textContent = '‚ñ∂';
        
        this.renderBlocks();
        this.events.emit('palette:opened');
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç—å –ø–∞–ª–∏—Ç—Ä—É
     */
    close() {
        this.isOpen = false;
        this.paletteContainer.classList.remove('open');
        
        const toggleBtn = document.getElementById('paletteToggle');
        toggleBtn.textContent = '‚óÄ';
        
        this.events.emit('palette:closed');
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–ª–∏—Ç—Ä—ã
     */
    toggle() {
        if (this.isOpen) {
            this.close();
        } else {
            this.open();
        }
    }

    /**
     * –û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –±–ª–æ–∫–∏ –≤ –ø–∞–ª–∏—Ç—Ä–µ
     */
    renderBlocks() {
        const content = document.getElementById('paletteContent');
        if (!content) return;

        const blocks = this.getFilteredBlocks();
        const groupedBlocks = this.groupBlocksByTags(blocks);

        content.innerHTML = '';

        if (blocks.length === 0) {
            content.innerHTML = `
                <div class="palette-empty">
                    <div class="empty-icon">üì≠</div>
                    <div class="empty-title">–ë–ª–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>
                    <div class="empty-subtitle">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å</div>
                </div>
            `;
            return;
        }

        // –û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –≥—Ä—É–ø–ø—ã
        Object.entries(groupedBlocks).forEach(([groupName, groupBlocks]) => {
            const groupElement = this.createBlocksGroup(groupName, groupBlocks);
            content.appendChild(groupElement);
        });
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏
     * @returns {Array} - –ú–∞—Å—Å–∏–≤ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤
     */
    getFilteredBlocks() {
        let blocks = this.state.get('blocks');

        // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
        if (this.searchQuery) {
            blocks = blocks.filter(block => 
                block.title.toLowerCase().includes(this.searchQuery) ||
                block.content.toLowerCase().includes(this.searchQuery) ||
                block.tags.some(tag => tag.toLowerCase().includes(this.searchQuery))
            );
        }

        // –§–∏–ª—å—Ç—Ä –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–µ–≥–∞–º
        if (this.selectedTags.size > 0) {
            blocks = blocks.filter(block =>
                block.tags.some(tag => this.selectedTags.has(tag))
            );
        }

        // –ò—Å–∫–ª—é—á–∏—Ç—å –±–ª–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å
        const activeTab = this.state.get('ui.activeTab');
        if (activeTab !== 'main') {
            const role = this.state.get(`roles.${activeTab}`);
            const existingBlockIds = new Set(
                role?.references?.map(ref => ref.blockId) || []
            );
            
            blocks = blocks.filter(block => !existingBlockIds.has(block.id));
        }

        return blocks;
    }

    /**
     * –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –±–ª–æ–∫–∏ –ø–æ —Ç–µ–≥–∞–º
     * @param {Array} blocks - –ú–∞—Å—Å–∏–≤ –±–ª–æ–∫–æ–≤
     * @returns {Object} - –û–±—ä–µ–∫—Ç —Å –≥—Ä—É–ø–ø–∞–º–∏ –±–ª–æ–∫–æ–≤
     */
    groupBlocksByTags(blocks) {
        const groups = {
            '–ë–µ–∑ —Ç–µ–≥–æ–≤': []
        };

        blocks.forEach(block => {
            if (!block.tags || block.tags.length === 0) {
                groups['–ë–µ–∑ —Ç–µ–≥–æ–≤'].push(block);
            } else {
                // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ –ø–µ—Ä–≤–æ–º—É —Ç–µ–≥—É
                const primaryTag = block.tags[0];
                const groupName = this.formatTagForGroup(primaryTag);
                
                if (!groups[groupName]) {
                    groups[groupName] = [];
                }
                groups[groupName].push(block);
            }
        });

        // –£–¥–∞–ª–∏—Ç—å –ø—É—Å—Ç—ã–µ –≥—Ä—É–ø–ø—ã
        Object.keys(groups).forEach(groupName => {
            if (groups[groupName].length === 0) {
                delete groups[groupName];
            }
        });

        return groups;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–≥ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
     * @param {string} tag - –¢–µ–≥
     * @returns {string} - –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
     */
    formatTagForGroup(tag) {
        // –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–≤–æ–π –±—É–∫–≤—ã
        return tag.charAt(0).toUpperCase() + tag.slice(1);
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É –±–ª–æ–∫–æ–≤
     * @param {string} groupName - –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
     * @param {Array} blocks - –ë–ª–æ–∫–∏ –≤ –≥—Ä—É–ø–ø–µ
     * @returns {HTMLElement} - –≠–ª–µ–º–µ–Ω—Ç –≥—Ä—É–ø–ø—ã
     */
    createBlocksGroup(groupName, blocks) {
        const group = document.createElement('div');
        group.className = 'blocks-group';

        const header = document.createElement('div');
        header.className = 'group-header';
        header.innerHTML = `
            <span>${groupName}</span>
            <span class="group-count">${blocks.length}</span>
        `;

        group.appendChild(header);

        blocks.forEach(block => {
            const blockElement = this.createBlockItem(block);
            group.appendChild(blockElement);
        });

        return group;
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –±–ª–æ–∫–∞ –≤ –ø–∞–ª–∏—Ç—Ä–µ
     * @param {Object} block - –î–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∞
     * @returns {HTMLElement} - –≠–ª–µ–º–µ–Ω—Ç –±–ª–æ–∫–∞
     */
    createBlockItem(block) {
        const item = document.createElement('div');
        item.className = 'block-item';
        item.setAttribute('data-block-id', block.id);

        // –ü—Ä–µ–≤—å—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤)
        const preview = block.content ? 
            block.content.substring(0, 100) + (block.content.length > 100 ? '...' : '') :
            '–ü—É—Å—Ç–æ–π –±–ª–æ–∫';

        item.innerHTML = `
            <div class="block-title">${this.escapeHtml(block.title)}</div>
            <div class="block-preview">${this.escapeHtml(preview)}</div>
            <div class="block-tags">
                ${block.tags.map(tag => 
                    `<span class="block-tag" style="background: ${this.getTagColor(tag)}">${this.escapeHtml(tag)}</span>`
                ).join('')}
            </div>
        `;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        item.addEventListener('click', () => this.selectBlock(block));
        item.addEventListener('dragstart', (e) => this.handleDragStart(e, block));
        item.setAttribute('draggable', 'true');

        return item;
    }

    /**
     * –í—ã–±—Ä–∞—Ç—å –±–ª–æ–∫ –∏–∑ –ø–∞–ª–∏—Ç—Ä—ã
     * @param {Object} block - –í—ã–±—Ä–∞–Ω–Ω—ã–π –±–ª–æ–∫
     */
    selectBlock(block) {
        const activeTab = this.state.get('ui.activeTab');
        
        if (activeTab === 'main') {
            console.warn('Cannot add reference in main tree');
            return;
        }

        // –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –±–ª–æ–∫ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–æ–ª–∏
        const canvasRect = document.querySelector('.canvas').getBoundingClientRect();
        const centerPosition = {
            x: Math.max(0, (window.innerWidth / 2) - canvasRect.left - 100),
            y: Math.max(0, (window.innerHeight / 2) - canvasRect.top - 60)
        };

        this.state.createReference(activeTab, block.id, centerPosition);

        // –ó–∞–∫—Ä—ã—Ç—å –ø–∞–ª–∏—Ç—Ä—É –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        this.close();

        this.events.emit('palette:block-selected', { 
            blockId: block.id, 
            roleId: activeTab,
            block 
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
     * @param {DragEvent} e - –°–æ–±—ã—Ç–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
     * @param {Object} block - –ë–ª–æ–∫
     */
    handleDragStart(e, block) {
        e.dataTransfer.setData('application/json', JSON.stringify({
            type: 'palette-block',
            blockId: block.id,
            block: block
        }));

        e.dataTransfer.effectAllowed = 'copy';

        this.events.emit('palette:drag-start', { block });
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ —Ç–µ–≥–∞–º
     */
    updateFilters() {
        const filtersContainer = document.getElementById('paletteFilters');
        if (!filtersContainer) return;

        const allTags = this.getAllTags();
        
        if (allTags.length === 0) {
            filtersContainer.style.display = 'none';
            return;
        }

        filtersContainer.style.display = 'block';
        filtersContainer.innerHTML = `
            <div class="filters-header">–§–∏–ª—å—Ç—Ä—ã:</div>
            <div class="filters-tags">
                ${allTags.map(tag => `
                    <button class="filter-tag ${this.selectedTags.has(tag) ? 'active' : ''}" 
                            data-tag="${this.escapeHtml(tag)}"
                            style="background: ${this.getTagColor(tag)}">
                        ${this.escapeHtml(tag)}
                    </button>
                `).join('')}
            </div>
            ${this.selectedTags.size > 0 ? 
                '<button class="clear-filters">–û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã</button>' : 
                ''
            }
        `;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filtersContainer.addEventListener('click', (e) => {
            if (e.target.classList.contains('filter-tag')) {
                this.toggleTagFilter(e.target.dataset.tag);
            } else if (e.target.classList.contains('clear-filters')) {
                this.clearFilters();
            }
        });
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏
     * @returns {Array} - –ú–∞—Å—Å–∏–≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤
     */
    getAllTags() {
        const blocks = this.state.get('blocks');
        const allTags = new Set();

        blocks.forEach(block => {
            if (block.tags) {
                block.tags.forEach(tag => allTags.add(tag));
            }
        });

        return Array.from(allTags).sort();
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥—É
     * @param {string} tag - –¢–µ–≥
     */
    toggleTagFilter(tag) {
        if (this.selectedTags.has(tag)) {
            this.selectedTags.delete(tag);
        } else {
            this.selectedTags.add(tag);
        }

        this.updateFilters();
        this.renderBlocks();
        
        this.events.emit('palette:filter-changed', { 
            selectedTags: Array.from(this.selectedTags) 
        });
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
     */
    clearFilters() {
        this.selectedTags.clear();
        this.updateFilters();
        this.renderBlocks();
        
        this.events.emit('palette:filters-cleared');
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è —Ç–µ–≥–∞ (—Ç–∞–∫–æ–π –∂–µ –∫–∞–∫ –≤ NotesModule)
     * @param {string} tag - –¢–µ–≥
     * @returns {string} - –¶–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ hex
     */
    getTagColor(tag) {
        const colors = [
            '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FECA57',
            '#FF9FF3', '#54A0FF', '#5F27CD', '#00D2D3', '#FF9F43',
            '#FD79A8', '#6C5CE7', '#A29BFE', '#74B9FF', '#0984E3',
            '#00B894', '#00CEC9', '#E17055', '#FDCB6E', '#E84393'
        ];
        
        let hash = 0;
        for (let i = 0; i < tag.length; i++) {
            const char = tag.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash;
        }
        
        const colorIndex = Math.abs(hash) % colors.length;
        return colors[colorIndex];
    }

    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
     * @param {string} text - –¢–µ–∫—Å—Ç
     * @returns {string} - –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
     */
    escapeHtml(text) {
        if (!text) return '';
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–ª–∏—Ç—Ä—ã
     * @returns {Object} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
     */
    getStats() {
        const blocks = this.state.get('blocks');
        const allTags = this.getAllTags();
        const filteredBlocks = this.getFilteredBlocks();

        return {
            totalBlocks: blocks.length,
            filteredBlocks: filteredBlocks.length,
            totalTags: allTags.length,
            selectedTags: this.selectedTags.size,
            isOpen: this.isOpen,
            searchQuery: this.searchQuery
        };
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–æ–¥—É–ª—è
     */
    destroy() {
        if (this.paletteContainer) {
            this.paletteContainer.remove();
        }
        
        console.log('üóëÔ∏è Blocks Palette module destroyed');
    }
}