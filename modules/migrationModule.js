/**
 * Migration Module - –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –≤–µ—Ä—Å–∏—è–º–∏
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å v1.0 ‚Üí v2.0
 */
export class MigrationModule {
    constructor(state, events) {
        this.state = state;
        this.events = events;
        this.currentVersion = "2.0";
        this.migrations = new Map();
        
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
     */
    init() {
        this.registerMigrations();
        console.log('üîÑ Migration module initialized');
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –º–∏–≥—Ä–∞—Ü–∏–π
     */
    registerMigrations() {
        // –ú–∏–≥—Ä–∞—Ü–∏—è —Å v1.0 –Ω–∞ v2.0
        this.migrations.set('1.0->2.0', {
            from: '1.0',
            to: '2.0',
            migrate: this.migrateV1ToV2.bind(this)
        });
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
     * @param {Object} data - –ó–∞–≥—Ä—É–∂–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ
     * @returns {Object} - –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     */
    autoMigrate(data) {
        if (!data) {
            return this.getInitialV2State();
        }

        const version = this.detectVersion(data);
        console.log(`üìä Detected data version: ${version}`);

        if (version === this.currentVersion) {
            return data; // –î–∞–Ω–Ω—ã–µ —É–∂–µ –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        }

        this.events.emit('migration:started', { from: version, to: this.currentVersion });

        let migratedData = data;
        
        // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ü–µ–ø–æ—á–∫—É –º–∏–≥—Ä–∞—Ü–∏–π
        if (version === '1.0') {
            migratedData = this.migrateV1ToV2(data);
        }

        this.events.emit('migration:completed', { 
            from: version, 
            to: this.currentVersion,
            blocksCount: migratedData.blocks?.length || 0,
            rolesCount: Object.keys(migratedData.roles || {}).length
        });

        console.log('‚úÖ Migration completed successfully');
        return migratedData;
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é –¥–∞–Ω–Ω—ã—Ö
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
     * @returns {string} - –í–µ—Ä—Å–∏—è –¥–∞–Ω–Ω—ã—Ö
     */
    detectVersion(data) {
        if (data.version) {
            return data.version;
        }

        // –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö
        if (data.notes && Array.isArray(data.notes)) {
            return '1.0'; // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –º–∞—Å—Å–∏–≤–æ–º notes
        }

        if (data.blocks && Array.isArray(data.blocks)) {
            return '2.0'; // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –±–ª–æ–∫–∞–º–∏
        }

        return '1.0'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–µ–π
    }

    /**
     * –ú–∏–≥—Ä–∞—Ü–∏—è —Å –≤–µ—Ä—Å–∏–∏ 1.0 –Ω–∞ 2.0
     * @param {Object} v1Data - –î–∞–Ω–Ω—ã–µ v1.0
     * @returns {Object} - –î–∞–Ω–Ω—ã–µ v2.0
     */
    migrateV1ToV2(v1Data) {
        console.log('üîÑ Migrating v1.0 ‚Üí v2.0...');

        const v2Data = {
            version: "2.0",
            blocks: [],
            roles: this.getDefaultRoles(),
            connections: v1Data.connections || [],
            ui: {
                activeTab: "main",
                theme: v1Data.ui?.theme || "light",
                paletteOpen: false
            },
            migrationInfo: {
                migratedAt: Date.now(),
                fromVersion: "1.0",
                originalNotesCount: v1Data.notes?.length || 0
            }
        };

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å notes –≤ blocks
        if (v1Data.notes && Array.isArray(v1Data.notes)) {
            v2Data.blocks = v1Data.notes.map(note => this.convertNoteToBlock(note));
            console.log(`üìù Converted ${v1Data.notes.length} notes to blocks`);
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        this.validateV2Data(v2Data);

        return v2Data;
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É –≤ –±–ª–æ–∫
     * @param {Object} note - –ó–∞–º–µ—Ç–∫–∞ v1.0
     * @returns {Object} - –ë–ª–æ–∫ v2.0
     */
    convertNoteToBlock(note) {
        return {
            id: note.id,
            title: note.title || '–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞',
            content: note.content || '',
            tags: note.tags || [],
            position: {
                x: note.position?.x || 0,
                y: note.position?.y || 0
            },
            createdAt: note.createdAt || Date.now(),
            updatedAt: note.updatedAt || Date.now(),
            // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
            _migrated: {
                from: 'note',
                at: Date.now()
            }
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     * @returns {Object} - –û–±—ä–µ–∫—Ç —Å —Ä–æ–ª—è–º–∏
     */
    getDefaultRoles() {
        return {
            manager: {
                id: 'manager',
                name: '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å',
                icon: 'üëî',
                isDefault: true,
                references: [],
                createdAt: Date.now()
            },
            employee: {
                id: 'employee', 
                name: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫',
                icon: 'üë§',
                isDefault: true,
                references: [],
                createdAt: Date.now()
            },
            intern: {
                id: 'intern',
                name: '–°—Ç–∞–∂–µ—Ä', 
                icon: 'üéì',
                isDefault: true,
                references: [],
                createdAt: Date.now()
            }
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ v2.0
     * @returns {Object} - –ß–∏—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ v2.0
     */
    getInitialV2State() {
        return {
            version: "2.0",
            blocks: [],
            roles: this.getDefaultRoles(),
            connections: [],
            ui: {
                activeTab: "main",
                theme: "light",
                paletteOpen: false
            }
        };
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö v2.0
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     * @throws {Error} - –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    validateV2Data(data) {
        const errors = [];

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏
        if (data.version !== "2.0") {
            errors.push(`Invalid version: ${data.version}`);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–æ–≤
        if (!Array.isArray(data.blocks)) {
            errors.push('Blocks must be an array');
        } else {
            data.blocks.forEach((block, index) => {
                if (!block.id) errors.push(`Block ${index} missing id`);
                if (typeof block.title !== 'string') errors.push(`Block ${index} invalid title`);
                if (!block.position || typeof block.position.x !== 'number') {
                    errors.push(`Block ${index} invalid position`);
                }
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π
        if (typeof data.roles !== 'object') {
            errors.push('Roles must be an object');
        } else {
            Object.entries(data.roles).forEach(([roleId, role]) => {
                if (!role.name) errors.push(`Role ${roleId} missing name`);
                if (!Array.isArray(role.references)) {
                    errors.push(`Role ${roleId} references must be array`);
                }
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π
        if (!Array.isArray(data.connections)) {
            errors.push('Connections must be an array');
        }

        if (errors.length > 0) {
            throw new Error(`Validation failed: ${errors.join(', ')}`);
        }

        console.log('‚úÖ Data validation passed');
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–µ—Ä—Å–∏–∏
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
     * @returns {Object} - –î–∞–Ω–Ω—ã–µ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
     */
    exportData(data) {
        return {
            ...data,
            version: this.currentVersion,
            exportedAt: Date.now(),
            exportMeta: {
                blocksCount: data.blocks?.length || 0,
                rolesCount: Object.keys(data.roles || {}).length,
                connectionsCount: data.connections?.length || 0
            }
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤–µ—Ä—Å–∏–π
     * @param {string} version - –í–µ—Ä—Å–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @returns {boolean} - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ –≤–µ—Ä—Å–∏—è
     */
    isVersionSupported(version) {
        const supportedVersions = ['1.0', '2.0'];
        return supportedVersions.includes(version);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∏–≥—Ä–∞—Ü–∏—è—Ö
     * @returns {Object} - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏—è—Ö
     */
    getMigrationInfo() {
        return {
            currentVersion: this.currentVersion,
            supportedVersions: ['1.0', '2.0'],
            availableMigrations: Array.from(this.migrations.keys()),
            migrationPaths: {
                '1.0': ['2.0'],
                '2.0': []
            }
        };
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –±—ç–∫–∞–ø–∞
     * @returns {string} - –ö–ª—é—á —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
     */
    createBackup(data) {
        const backupKey = `notes-app-backup-${Date.now()}`;
        try {
            localStorage.setItem(backupKey, JSON.stringify(data));
            console.log(`üíæ Backup created: ${backupKey}`);
            return backupKey;
        } catch (error) {
            console.warn('‚ö†Ô∏è Could not create backup:', error);
            return null;
        }
    }

    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
     * @param {string} backupKey - –ö–ª—é—á —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
     * @returns {Object|null} - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     */
    restoreBackup(backupKey) {
        try {
            const data = localStorage.getItem(backupKey);
            if (data) {
                console.log(`üîÑ Restored from backup: ${backupKey}`);
                return JSON.parse(data);
            }
        } catch (error) {
            console.error('‚ùå Failed to restore backup:', error);
        }
        return null;
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
     * @param {number} maxAge - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –≤ –¥–Ω—è—Ö
     */
    cleanupOldBackups(maxAge = 7) {
        const cutoffTime = Date.now() - (maxAge * 24 * 60 * 60 * 1000);
        
        Object.keys(localStorage).forEach(key => {
            if (key.startsWith('notes-app-backup-')) {
                const timestamp = parseInt(key.split('-').pop());
                if (timestamp < cutoffTime) {
                    localStorage.removeItem(key);
                    console.log(`üóëÔ∏è Removed old backup: ${key}`);
                }
            }
        });
    }
}