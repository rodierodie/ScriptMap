/**
 * Canvas Module v2.0 - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ö–æ–ª—Å—Ç–æ–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–∫–ª–∞–¥–æ–∫ –∏ —Ä–æ–ª–µ–π
 */
export class CanvasModule {
    constructor(state, events) {
        this.state = state;
        this.events = events;
        this.container = document.querySelector('.canvas-container');
        this.canvas = document.querySelector('.canvas');
        this.canvasArea = document.querySelector('.canvas-area');
        this.currentContext = null;
        
        if (!this.container || !this.canvas) {
            throw new Error('Canvas elements not found in DOM');
        }
        
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
     */
    init() {
        this.setupEventListeners();
        this.setupStateWatchers();
        this.initializeCanvasState();
        this.updateCanvasForCurrentTab();
        
        console.log('üé® Canvas module v2.0 initialized');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ö–æ–ª—Å—Ç–∞
     */
    initializeCanvasState() {
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        if (!this.state.get('canvas.transform')) {
            this.state.set('canvas.transform', { x: 0, y: 0 });
        }
        if (!this.state.get('canvas.zoom')) {
            this.state.set('canvas.zoom', 1);
        }
        if (!this.state.get('canvas.isDragging')) {
            this.state.set('canvas.isDragging', false);
        }
        if (!this.state.get('canvas.isPanning')) {
            this.state.set('canvas.isPanning', false);
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à–∏ –ø—Ä–æ–±–µ–ª
        document.addEventListener('keydown', this.handleKeyDown.bind(this));
        document.addEventListener('keyup', this.handleKeyUp.bind(this));
        
        // –ü–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ
        this.container.addEventListener('mousedown', this.handleMouseDown.bind(this));
        document.addEventListener('mousemove', this.handleMouseMove.bind(this));
        document.addEventListener('mouseup', this.handleMouseUp.bind(this));
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤/—Å—Å—ã–ª–æ–∫ –¥–≤–æ–π–Ω—ã–º –∫–ª–∏–∫–æ–º
        this.container.addEventListener('dblclick', this.handleDoubleClick.bind(this));
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–∞ –Ω–∞ –ø—Ä–æ–±–µ–ª
        window.addEventListener('keydown', this.preventSpaceScroll.bind(this));
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        window.addEventListener('resize', this.handleResize.bind(this));
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–æ–ª—Å—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É
        this.events.on('canvas:center-request', () => {
            this.centerCanvas();
        });

        // –°–æ–±—ã—Ç–∏—è –æ—Ç —Å–∏—Å—Ç–µ–º—ã –≤–∫–ª–∞–¥–æ–∫
        this.events.on('tab:context-changed', (context) => {
            this.handleContextChange(context);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ Drag & Drop –∏–∑ –ø–∞–ª–∏—Ç—Ä—ã
        this.canvasArea.addEventListener('dragover', this.handleDragOver.bind(this));
        this.canvasArea.addEventListener('drop', this.handleDrop.bind(this));
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–∫–ª–∞–¥–∫–∏
     * @param {Object} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∫–ª–∞–¥–∫–∏
     */
    handleContextChange(context) {
        this.currentContext = context;
        this.updateCanvasForContext(context);
        
        // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∏–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        this.updateCanvasStyles(context);
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Ö–æ–ª—Å—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
     * @param {Object} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∫–ª–∞–¥–∫–∏
     */
    updateCanvasForContext(context) {
        // –û–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞—Å—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è CSS —Å—Ç–∏–ª–µ–π
        this.container.classList.remove('main-tree-mode', 'role-mode');
        
        if (context.isMainTree) {
            this.container.classList.add('main-tree-mode');
        } else {
            this.container.classList.add('role-mode');
        }
        
        // –û–±–Ω–æ–≤–∏—Ç—å —Ñ–æ–Ω–æ–≤—É—é —Å–µ—Ç–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        this.updateBackgroundGrid(context);
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∏–ª–∏ —Ö–æ–ª—Å—Ç–∞
     * @param {Object} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∫–ª–∞–¥–∫–∏
     */
    updateCanvasStyles(context) {
        if (context.isMainTree) {
            // –í –æ—Å–Ω–æ–≤–Ω–æ–º –¥–µ—Ä–µ–≤–µ - –æ–±—ã—á–Ω–∞—è —Å–µ—Ç–∫–∞
            this.container.style.backgroundImage = 
                'radial-gradient(circle, #ddd 1px, transparent 1px)';
        } else {
            // –í —Ä–æ–ª—è—Ö - –¥—Ä—É–≥–æ–π —Ü–≤–µ—Ç —Å–µ—Ç–∫–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–ª–∏—á–∏—è
            this.container.style.backgroundImage = 
                'radial-gradient(circle, #34a853 1px, transparent 1px)';
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Ñ–æ–Ω–æ–≤—É—é —Å–µ—Ç–∫—É
     * @param {Object} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∫–ª–∞–¥–∫–∏
     */
    updateBackgroundGrid(context) {
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å–µ—Ç–∫–∏ –∏–ª–∏ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
        const gridSize = context.isMainTree ? '20px' : '25px';
        this.container.style.backgroundSize = `${gridSize} ${gridSize}`;
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    setupStateWatchers() {
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ö–æ–ª—Å—Ç–∞
        this.state.watch('canvas.transform', () => {
            this.updateTransform();
        });
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è
        this.state.watch('canvas.isPanning', (isPanning) => {
            if (isPanning) {
                this.container.classList.add('panning');
            } else {
                this.container.classList.remove('panning');
            }
        });

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
        this.state.watch('ui.activeTab', () => {
            this.updateCanvasForCurrentTab();
        });
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Ö–æ–ª—Å—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
     */
    updateCanvasForCurrentTab() {
        const activeTab = this.state.get('ui.activeTab');
        
        if (activeTab === 'main') {
            this.currentContext = {
                isMainTree: true,
                canCreateBlocks: true,
                canCreateReferences: false
            };
        } else {
            const role = this.state.get(`roles.${activeTab}`);
            this.currentContext = {
                isMainTree: false,
                canCreateBlocks: false,
                canCreateReferences: true,
                role: role
            };
        }
        
        this.updateCanvasForContext(this.currentContext);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ Drag Over –¥–ª—è Drag & Drop
     * @param {DragEvent} e - –°–æ–±—ã—Ç–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
     */
    handleDragOver(e) {
        e.preventDefault();
        e.dataTransfer.dropEffect = 'copy';
        
        // –î–æ–±–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
        this.container.classList.add('drag-over');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ Drop –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫ –∏–∑ –ø–∞–ª–∏—Ç—Ä—ã
     * @param {DragEvent} e - –°–æ–±—ã—Ç–∏–µ —Å–±—Ä–æ—Å–∞
     */
    handleDrop(e) {
        e.preventDefault();
        this.container.classList.remove('drag-over');
        
        try {
            const dragData = JSON.parse(e.dataTransfer.getData('application/json'));
            
            if (dragData.type === 'palette-block' && this.currentContext && !this.currentContext.isMainTree) {
                // –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –≤ —Ç–µ–∫—É—â–µ–π —Ä–æ–ª–∏
                const canvasRect = this.canvas.getBoundingClientRect();
                const position = {
                    x: e.clientX - canvasRect.left,
                    y: e.clientY - canvasRect.top
                };
                
                const activeTab = this.state.get('ui.activeTab');
                this.state.createReference(activeTab, dragData.blockId, position);
                
                this.events.emit('canvas:reference-dropped', {
                    blockId: dragData.blockId,
                    roleId: activeTab,
                    position
                });
            }
        } catch (error) {
            console.warn('Invalid drag data:', error);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à
     * @param {KeyboardEvent} e - –°–æ–±—ã—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
     */
    handleKeyDown(e) {
        // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä–æ–±–µ–ª –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        if (document.querySelector('.modal-overlay, .role-modal-overlay.visible')) {
            return;
        }

        if (e.code === 'Space' && !this.state.get('interaction.isSpacePressed')) {
            e.preventDefault();
            this.state.set('interaction.isSpacePressed', true);
            this.container.style.cursor = 'grab';
            
            this.events.emit('canvas:space-pressed');
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –∫–ª–∞–≤–∏—à
     * @param {KeyboardEvent} e - –°–æ–±—ã—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
     */
    handleKeyUp(e) {
        // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä–æ–±–µ–ª –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        if (document.querySelector('.modal-overlay, .role-modal-overlay.visible')) {
            return;
        }

        if (e.code === 'Space') {
            this.state.set('interaction.isSpacePressed', false);
            this.state.set('canvas.isPanning', false);
            this.container.style.cursor = 'default';
            
            this.events.emit('canvas:space-released');
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –º—ã—à–∏
     * @param {MouseEvent} e - –°–æ–±—ã—Ç–∏–µ –º—ã—à–∏
     */
    handleMouseDown(e) {
        const isSpacePressed = this.state.get('interaction.isSpacePressed');
        const isDragging = this.state.get('canvas.isDragging');
        
        if (isSpacePressed && !isDragging) {
            this.state.set('canvas.isPanning', true);
            
            const transform = this.state.get('canvas.transform') || { x: 0, y: 0 };
            this.state.set('interaction.panStart', {
                x: e.clientX - transform.x,
                y: e.clientY - transform.y
            });
            
            e.preventDefault();
            this.events.emit('canvas:pan-start', { x: e.clientX, y: e.clientY });
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
     * @param {MouseEvent} e - –°–æ–±—ã—Ç–∏–µ –º—ã—à–∏
     */
    handleMouseMove(e) {
        const isPanning = this.state.get('canvas.isPanning');
        const isSpacePressed = this.state.get('interaction.isSpacePressed');
        
        if (isPanning && isSpacePressed) {
            const panStart = this.state.get('interaction.panStart');
            if (panStart) {
                const newTransform = {
                    x: e.clientX - panStart.x,
                    y: e.clientY - panStart.y
                };
                
                this.state.set('canvas.transform', newTransform);
                this.events.emit('canvas:pan-move', newTransform);
            }
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –º—ã—à–∏
     */
    handleMouseUp() {
        if (this.state.get('canvas.isPanning')) {
            this.state.set('canvas.isPanning', false);
            this.events.emit('canvas:pan-end');
        }
        
        // –£–±—Ä–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã drag over
        this.container.classList.remove('drag-over');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞
     * @param {MouseEvent} e - –°–æ–±—ã—Ç–∏–µ –º—ã—à–∏
     */
    handleDoubleClick(e) {
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ –ø—É—Å—Ç–æ–º—É –º–µ—Å—Ç—É
        if (e.target === this.container || e.target === this.canvas) {
            if (!this.currentContext) {
                console.warn('No context available for double click');
                return;
            }

            const canvasRect = this.canvas.getBoundingClientRect();
            const x = e.clientX - canvasRect.left;
            const y = e.clientY - canvasRect.top;
            
            if (this.currentContext.canCreateBlocks) {
                // –í –æ—Å–Ω–æ–≤–Ω–æ–º –¥–µ—Ä–µ–≤–µ —Å–æ–∑–¥–∞–µ–º –±–ª–æ–∫
                this.events.emit('note:create', { x, y });
                this.events.emit('canvas:block-created', { x, y });
            } else if (this.currentContext.canCreateReferences) {
                // –í —Ä–æ–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–ª–∏—Ç—Ä—É
                this.events.emit('ui:add-reference-request');
                this.events.emit('canvas:reference-request', { x, y });
            }
        }
    }

    /**
     * –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–æ–º –ø—Ä–æ–±–µ–ª–µ
     * @param {KeyboardEvent} e - –°–æ–±—ã—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
     */
    preventSpaceScroll(e) {
        // –ù–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–µ–ª –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        if (document.querySelector('.modal-overlay, .role-modal-overlay.visible')) {
            return;
        }

        if (e.code === 'Space' && e.target.tagName !== 'TEXTAREA' && e.target.tagName !== 'INPUT') {
            e.preventDefault();
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
     */
    handleResize() {
        this.events.emit('canvas:resize', {
            width: window.innerWidth,
            height: window.innerHeight
        });
        
        // –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã —Ö–æ–ª—Å—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        this.updateCanvasSize();
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã —Ö–æ–ª—Å—Ç–∞
     */
    updateCanvasSize() {
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω—è—Ç—å —Ä–∞–∑–º–µ—Ä —Ö–æ–ª—Å—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        const items = this.getCurrentTabItems();
        
        if (items.length > 0) {
            const bounds = this.calculateContentBounds(items);
            const minWidth = Math.max(5000, bounds.maxX + 500);
            const minHeight = Math.max(5000, bounds.maxY + 500);
            
            this.canvas.style.width = minWidth + 'px';
            this.canvas.style.height = minHeight + 'px';
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
     * @returns {Array} - –ú–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    getCurrentTabItems() {
        const activeTab = this.state.get('ui.activeTab');
        
        if (activeTab === 'main') {
            return this.state.get('blocks');
        } else {
            return this.state.getCurrentTabData('items') || [];
        }
    }

    /**
     * –í—ã—á–∏—Å–ª–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
     * @param {Array} items - –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
     * @returns {Object} - –û–±—ä–µ–∫—Ç —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏
     */
    calculateContentBounds(items) {
        let maxX = 0;
        let maxY = 0;
        
        items.forEach(item => {
            if (item.position) {
                maxX = Math.max(maxX, item.position.x + 400); // +400 –¥–ª—è —à–∏—Ä–∏–Ω—ã –∑–∞–º–µ—Ç–∫–∏
                maxY = Math.max(maxY, item.position.y + 200); // +200 –¥–ª—è –≤—ã—Å–æ—Ç—ã –∑–∞–º–µ—Ç–∫–∏
            }
        });
        
        return { maxX, maxY };
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ö–æ–ª—Å—Ç–∞
     */
    updateTransform() {
        const transform = this.state.get('canvas.transform') || { x: 0, y: 0 };
        const zoom = this.state.get('canvas.zoom') || 1;
        
        this.canvas.style.transform = `translate(${transform.x}px, ${transform.y}px) scale(${zoom})`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ñ–æ–Ω–æ–≤–æ–π —Å–µ—Ç–∫–∏
        this.container.style.backgroundPosition = `${transform.x}px ${transform.y}px`;
    }

    /**
     * –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ö–æ–ª—Å—Ç
     */
    centerCanvas() {
        const containerRect = this.container.getBoundingClientRect();
        const items = this.getCurrentTabItems();
        
        let centerTransform;
        
        if (items.length === 0) {
            // –ï—Å–ª–∏ –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫ –Ω–∞—á–∞–ª—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            centerTransform = {
                x: containerRect.width / 2 - 200,
                y: containerRect.height / 2 - 100
            };
        } else {
            // –ù–∞–π—Ç–∏ —Ü–µ–Ω—Ç—Ä –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            const bounds = this.calculateContentBounds(items);
            const contentCenterX = bounds.maxX / 2;
            const contentCenterY = bounds.maxY / 2;
            
            centerTransform = {
                x: containerRect.width / 2 - contentCenterX,
                y: containerRect.height / 2 - contentCenterY
            };
        }
        
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ transform –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        this.state.set('canvas.transform', centerTransform);
        this.events.emit('canvas:centered', { items: items.length });
    }

    /**
     * –ó—É–º —Ö–æ–ª—Å—Ç–∞
     * @param {number} delta - –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑—É–º–∞ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ)
     * @param {Object} center - –¶–µ–Ω—Ç—Ä –∑—É–º–∞ {x, y}
     */
    zoom(delta, center = null) {
        const currentZoom = this.state.get('canvas.zoom') || 1;
        const newZoom = Math.max(0.1, Math.min(3, currentZoom + delta));
        
        if (center) {
            // –ó—É–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–æ—á–∫–∏
            const transform = this.state.get('canvas.transform') || { x: 0, y: 0 };
            const zoomFactor = newZoom / currentZoom;
            
            const newTransform = {
                x: center.x - (center.x - transform.x) * zoomFactor,
                y: center.y - (center.y - transform.y) * zoomFactor
            };
            
            this.state.set('canvas.transform', newTransform);
        }
        
        this.state.set('canvas.zoom', newZoom);
        this.events.emit('canvas:zoomed', { zoom: newZoom, center });
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ —Ö–æ–ª—Å—Ç–µ –∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —ç–∫—Ä–∞–Ω–∞
     * @param {number} screenX - X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
     * @param {number} screenY - Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
     * @returns {Object} - {x, y} –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ —Ö–æ–ª—Å—Ç–µ
     */
    screenToCanvas(screenX, screenY) {
        const canvasRect = this.canvas.getBoundingClientRect();
        return {
            x: screenX - canvasRect.left,
            y: screenY - canvasRect.top
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —ç–∫—Ä–∞–Ω–∞ –∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ö–æ–ª—Å—Ç–∞
     * @param {number} canvasX - X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –Ω–∞ —Ö–æ–ª—Å—Ç–µ
     * @param {number} canvasY - Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –Ω–∞ —Ö–æ–ª—Å—Ç–µ
     * @returns {Object} - {x, y} –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ
     */
    canvasToScreen(canvasX, canvasY) {
        const canvasRect = this.canvas.getBoundingClientRect();
        return {
            x: canvasX + canvasRect.left,
            y: canvasY + canvasRect.top
        };
    }

    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    playWelcomeAnimation() {
        if (this.state.get('blocks').length === 0) {
            // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            this.showCanvasHint('–î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫–∞', 3000);
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –Ω–∞ —Ö–æ–ª—Å—Ç–µ
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
     * @param {number} duration - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞
     */
    showCanvasHint(message, duration = 2000) {
        const hint = document.createElement('div');
        hint.className = 'canvas-hint';
        hint.style.cssText = `
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0,0,0,0.8);
            color: white;
            padding: 12px 20px;
            border-radius: 6px;
            font-size: 14px;
            z-index: 1000;
            pointer-events: none;
            animation: fadeInOut 0.3s ease;
        `;
        hint.textContent = message;
        
        this.canvasArea.appendChild(hint);
        
        setTimeout(() => {
            hint.style.animation = 'fadeOut 0.3s ease';
            setTimeout(() => {
                if (hint.parentNode) {
                    hint.parentNode.removeChild(hint);
                }
            }, 300);
        }, duration);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ö–æ–ª—Å—Ç–∞
     * @returns {Object} - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö–æ–ª—Å—Ç–µ
     */
    getCanvasInfo() {
        const transform = this.state.get('canvas.transform');
        const zoom = this.state.get('canvas.zoom') || 1;
        const items = this.getCurrentTabItems();
        
        return {
            transform,
            zoom,
            itemsCount: items.length,
            context: this.currentContext,
            canvasSize: {
                width: parseInt(this.canvas.style.width) || 5000,
                height: parseInt(this.canvas.style.height) || 5000
            },
            viewport: {
                width: this.container.offsetWidth,
                height: this.container.offsetHeight
            }
        };
    }

    /**
     * –°–±—Ä–æ—Å–∏—Ç—å –≤–∏–¥ —Ö–æ–ª—Å—Ç–∞
     */
    resetView() {
        this.state.set('canvas.transform', { x: 0, y: 0 });
        this.state.set('canvas.zoom', 1);
        this.events.emit('canvas:view-reset');
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–æ–¥—É–ª—è (–æ—á–∏—Å—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)
     */
    destroy() {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        document.removeEventListener('keydown', this.handleKeyDown);
        document.removeEventListener('keyup', this.handleKeyUp);
        document.removeEventListener('mousemove', this.handleMouseMove);
        document.removeEventListener('mouseup', this.handleMouseUp);
        window.removeEventListener('keydown', this.preventSpaceScroll);
        window.removeEventListener('resize', this.handleResize);
        
        console.log('üóëÔ∏è Canvas module v2.0 destroyed');
    }
}