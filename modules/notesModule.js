/**
 * Notes Module v2.0 - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞–º–∏ –∏ —Å—Å—ã–ª–∫–∞–º–∏
 * 
 * –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ v2.0:
 * - –†–∞–∑–ª–∏—á–∏–µ –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏ (–æ—Å–Ω–æ–≤–Ω–æ–µ –¥–µ—Ä–µ–≤–æ) –∏ —Å—Å—ã–ª–∫–∞–º–∏ (—Ä–æ–ª–∏)
 * - –°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤ —Ç–æ–ª—å–∫–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –¥–µ—Ä–µ–≤–µ
 * - –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –≤ —Ä–æ–ª—è—Ö
 * - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–ª–æ–∫–æ–≤ –≤–æ –≤—Å–µ—Ö —Å—Å—ã–ª–∫–∞—Ö
 */
export class NotesModule {
    constructor(state, events) {
        this.state = state;
        this.events = events;
        this.canvas = document.querySelector('.canvas');
        this.positionUpdateTimeout = null;
        this.isV2Mode = true; // –§–ª–∞–≥ –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        
        if (!this.canvas) {
            throw new Error('Canvas element not found in DOM');
        }
        
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
     */
    init() {
        this.setupEventListeners();
        this.setupStateWatchers();
        this.setupGlobalDragEvents();
        
        console.log('üìù Notes module v2.0 initialized');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤/—Å—Å—ã–ª–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        this.events.on('note:create', (data) => {
            this.createItem(data?.x, data?.y);
        });
        
        // –£–¥–∞–ª–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤/—Å—Å—ã–ª–æ–∫
        this.events.on('note:delete', (itemId) => {
            this.deleteItem(itemId);
        });
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤
        this.events.on('note:update', (data) => {
            this.updateItem(data.id, data.updates);
        });

        // –°–æ–±—ã—Ç–∏—è –æ—Ç —Å–∏—Å—Ç–µ–º—ã –≤–∫–ª–∞–¥–æ–∫
        this.events.on('tab:context-changed', (context) => {
            this.handleContextChange(context);
        });

        // –°–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫ –∏–∑ –ø–∞–ª–∏—Ç—Ä—ã
        this.events.on('palette:block-selected', (data) => {
            this.handlePaletteSelection(data);
        });

        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–ª–æ–∫–æ–≤ –∏ —Å—Å—ã–ª–æ–∫
        this.events.on('block:updated', (data) => {
            this.syncBlockToReferences(data.id);
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    setupStateWatchers() {
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–ª–æ–∫–æ–≤ (–æ—Å–Ω–æ–≤–Ω–æ–µ –¥–µ—Ä–µ–≤–æ)
        this.state.watch('blocks', (newBlocks, oldBlocks) => {
            this.handleBlocksChange(newBlocks, oldBlocks);
        });

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Å—ã–ª–æ–∫ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–æ–ª–∏
        this.state.watch('ui.activeTab', (newTab) => {
            this.handleTabSwitch(newTab);
        });

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Å—ã–ª–æ–∫ –≤ —Ä–æ–ª—è—Ö
        const roles = this.state.get('roles');
        Object.keys(roles).forEach(roleId => {
            this.state.watch(`roles.${roleId}.references`, () => {
                this.handleReferencesChange(roleId);
            });
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–∫–ª–∞–¥–∫–∏
     * @param {Object} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∫–ª–∞–¥–∫–∏
     */
    handleContextChange(context) {
        // –û—á–∏—Å—Ç–∏—Ç—å —Ö–æ–ª—Å—Ç
        this.clearCanvas();
        
        // –û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if (context.isMainTree) {
            this.renderBlocks();
        } else {
            this.renderReferences(context.tabId);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
     * @param {string} tabId - ID –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏
     */
    handleTabSwitch(tabId) {
        this.clearCanvas();
        
        if (tabId === 'main') {
            this.renderBlocks();
        } else {
            this.renderReferences(tabId);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±–ª–æ–∫–∞ –∏–∑ –ø–∞–ª–∏—Ç—Ä—ã
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞
     */
    handlePaletteSelection(data) {
        // –°—Å—ã–ª–∫–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞ –≤ state, –ø—Ä–æ—Å—Ç–æ —Ä–µ–Ω–¥–µ—Ä–∏–º
        this.renderReferences(data.roleId);
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç (–±–ª–æ–∫ –∏–ª–∏ —Å—Å—ã–ª–∫—É) –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
     * @param {number} x - X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
     * @param {number} y - Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
     * @returns {Object} - –°–æ–∑–¥–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
     */
    createItem(x = null, y = null) {
        const activeTab = this.state.get('ui.activeTab');
        const position = {
            x: x !== null ? x : Math.random() * 300 + 100,
            y: y !== null ? y : Math.random() * 200 + 100
        };

        if (activeTab === 'main') {
            // –í –æ—Å–Ω–æ–≤–Ω–æ–º –¥–µ—Ä–µ–≤–µ —Å–æ–∑–¥–∞–µ–º –±–ª–æ–∫
            return this.createBlock(position);
        } else {
            // –í —Ä–æ–ª–∏ –Ω–µ–ª—å–∑—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –±–ª–æ–∫–∏
            console.warn('Cannot create new blocks in role. Use palette to add references.');
            this.events.emit('ui:show-notification', {
                message: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–ª–∏—Ç—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–æ–≤ –≤ —Ä–æ–ª—å',
                type: 'warning'
            });
            return null;
        }
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±–ª–æ–∫ (—Ç–æ–ª—å–∫–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –¥–µ—Ä–µ–≤–µ)
     * @param {Object} position - –ü–æ–∑–∏—Ü–∏—è –±–ª–æ–∫–∞
     * @returns {Object} - –°–æ–∑–¥–∞–Ω–Ω—ã–π –±–ª–æ–∫
     */
    createBlock(position) {
        const block = this.state.createBlock({
            title: '–ù–æ–≤—ã–π –±–ª–æ–∫',
            content: '',
            tags: [],
            position
        });
        
        this.events.emit('note:created', block);
        console.log('üìù Block created:', block.id);
        
        return block;
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç (–±–ª–æ–∫ –∏–ª–∏ —Å—Å—ã–ª–∫—É)
     * @param {string} itemId - ID —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    deleteItem(itemId) {
        const activeTab = this.state.get('ui.activeTab');
        
        if (activeTab === 'main') {
            // –í –æ—Å–Ω–æ–≤–Ω–æ–º –¥–µ—Ä–µ–≤–µ —É–¥–∞–ª—è–µ–º –±–ª–æ–∫
            this.deleteBlock(itemId);
        } else {
            // –í —Ä–æ–ª–∏ —É–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫—É
            this.deleteReference(activeTab, itemId);
        }
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å –±–ª–æ–∫ (—Ç–æ–ª—å–∫–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –¥–µ—Ä–µ–≤–µ)
     * @param {string} blockId - ID –±–ª–æ–∫–∞
     */
    deleteBlock(blockId) {
        this.state.deleteBlock(blockId);
        console.log('üóëÔ∏è Block deleted:', blockId);
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É (—Ç–æ–ª—å–∫–æ –≤ —Ä–æ–ª—è—Ö)
     * @param {string} roleId - ID —Ä–æ–ª–∏
     * @param {string} referenceId - ID —Å—Å—ã–ª–∫–∏
     */
    deleteReference(roleId, referenceId) {
        this.state.deleteReference(roleId, referenceId);
        console.log('üóëÔ∏è Reference deleted:', referenceId);
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç
     * @param {string} itemId - ID —ç–ª–µ–º–µ–Ω—Ç–∞
     * @param {Object} updates - –û–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    updateItem(itemId, updates) {
        const activeTab = this.state.get('ui.activeTab');
        
        if (activeTab === 'main') {
            // –í –æ—Å–Ω–æ–≤–Ω–æ–º –¥–µ—Ä–µ–≤–µ –æ–±–Ω–æ–≤–ª—è–µ–º –±–ª–æ–∫
            this.updateBlock(itemId, updates);
        } else {
            // –í —Ä–æ–ª–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if (updates.position) {
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å—Å—ã–ª–∫–∏
                this.updateReferencePosition(activeTab, itemId, updates.position);
            } else {
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ - –Ω–∞–π—Ç–∏ –±–ª–æ–∫ –ø–æ —Å—Å—ã–ª–∫–µ
                const reference = this.findReferenceById(activeTab, itemId);
                if (reference) {
                    this.updateBlock(reference.blockId, updates);
                }
            }
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –±–ª–æ–∫
     * @param {string} blockId - ID –±–ª–æ–∫–∞
     * @param {Object} updates - –û–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    updateBlock(blockId, updates) {
        this.state.updateBlock(blockId, updates);
        this.events.emit('note:updated', { id: blockId, updates });
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é —Å—Å—ã–ª–∫–∏
     * @param {string} roleId - ID —Ä–æ–ª–∏
     * @param {string} referenceId - ID —Å—Å—ã–ª–∫–∏
     * @param {Object} position - –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
     */
    updateReferencePosition(roleId, referenceId, position) {
        this.state.updateReference(roleId, referenceId, position);
    }

    /**
     * –ù–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –ø–æ ID
     * @param {string} roleId - ID —Ä–æ–ª–∏
     * @param {string} referenceId - ID —Å—Å—ã–ª–∫–∏
     * @returns {Object|null} - –°—Å—ã–ª–∫–∞ –∏–ª–∏ null
     */
    findReferenceById(roleId, referenceId) {
        const role = this.state.get(`roles.${roleId}`);
        return role?.references?.find(ref => ref.id === referenceId) || null;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–ª–æ–∫–æ–≤
     * @param {Array} newBlocks - –ù–æ–≤—ã–µ –±–ª–æ–∫–∏
     * @param {Array} oldBlocks - –°—Ç–∞—Ä—ã–µ –±–ª–æ–∫–∏
     */
    handleBlocksChange(newBlocks, oldBlocks) {
        const activeTab = this.state.get('ui.activeTab');
        
        if (activeTab === 'main') {
            // –í –æ—Å–Ω–æ–≤–Ω–æ–º –¥–µ—Ä–µ–≤–µ —Ä–µ–Ω–¥–µ—Ä–∏–º –±–ª–æ–∫–∏
            this.renderBlocks();
        }
        
        // –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏, –µ—Å–ª–∏ –±–ª–æ–∫–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
        this.updateAllReferences();
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Å—ã–ª–æ–∫ –≤ —Ä–æ–ª–∏
     * @param {string} roleId - ID —Ä–æ–ª–∏
     */
    handleReferencesChange(roleId) {
        const activeTab = this.state.get('ui.activeTab');
        
        if (activeTab === roleId) {
            this.renderReferences(roleId);
        }
    }

    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–ª–æ–∫–∞ –≤–æ –≤—Å–µ—Ö —Å—Å—ã–ª–∫–∞—Ö
     * @param {string} blockId - ID –±–ª–æ–∫–∞
     */
    syncBlockToReferences(blockId) {
        const activeTab = this.state.get('ui.activeTab');
        
        // –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –≤–∏–¥–∏–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç—Ç–æ—Ç –±–ª–æ–∫
        document.querySelectorAll(`[data-block-id="${blockId}"]`).forEach(element => {
            if (element.dataset.isReference === 'true') {
                this.updateReferenceElement(element, blockId);
            }
        });
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç —Å—Å—ã–ª–∫–∏
     * @param {HTMLElement} element - DOM —ç–ª–µ–º–µ–Ω—Ç
     * @param {string} blockId - ID –±–ª–æ–∫–∞
     */
    updateReferenceElement(element, blockId) {
        const block = this.state.get('blocks').find(b => b.id === blockId);
        if (!block) return;

        // –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (–Ω–æ –Ω–µ –ø–æ–∑–∏—Ü–∏—é)
        const titleElement = element.querySelector('.note-title');
        const previewElement = element.querySelector('.note-preview');
        const tagsContainer = element.querySelector('.note-tags');

        if (titleElement) {
            titleElement.textContent = block.title || '–ù–æ–≤—ã–π –±–ª–æ–∫';
        }

        if (previewElement) {
            if (block.content && block.content.trim()) {
                previewElement.textContent = block.content;
                previewElement.classList.remove('empty');
            } else {
                previewElement.textContent = '–ü—É—Å—Ç–æ–π –±–ª–æ–∫';
                previewElement.classList.add('empty');
            }
        }

        if (tagsContainer) {
            this.renderItemTags(tagsContainer, block.tags || []);
        }
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å —Ö–æ–ª—Å—Ç
     */
    clearCanvas() {
        this.canvas.querySelectorAll('.note').forEach(note => note.remove());
    }

    /**
     * –û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –±–ª–æ–∫–∏ (–æ—Å–Ω–æ–≤–Ω–æ–µ –¥–µ—Ä–µ–≤–æ)
     */
    renderBlocks() {
        this.clearCanvas();
        
        const blocks = this.state.get('blocks');
        blocks.forEach(block => this.renderBlock(block));
    }

    /**
     * –û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫–∏ –¥–ª—è —Ä–æ–ª–∏
     * @param {string} roleId - ID —Ä–æ–ª–∏
     */
    renderReferences(roleId) {
        this.clearCanvas();
        
        const resolvedReferences = this.state.getCurrentTabData('items');
        resolvedReferences.forEach(item => this.renderReference(item, roleId));
    }

    /**
     * –û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –±–ª–æ–∫
     * @param {Object} block - –û–±—ä–µ–∫—Ç –±–ª–æ–∫–∞
     */
    renderBlock(block) {
        const noteElement = this.createNoteElement(block, false);
        this.canvas.appendChild(noteElement);
        this.setupNoteEvents(noteElement, block.id, false);
    }

    /**
     * –û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—É
     * @param {Object} item - –û–±—ä–µ–∫—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ (–±–ª–æ–∫ + –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏)
     * @param {string} roleId - ID —Ä–æ–ª–∏
     */
    renderReference(item, roleId) {
        const noteElement = this.createNoteElement(item, true);
        this.canvas.appendChild(noteElement);
        this.setupNoteEvents(noteElement, item._reference.id, true, roleId);
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å DOM —ç–ª–µ–º–µ–Ω—Ç –∑–∞–º–µ—Ç–∫–∏
     * @param {Object} item - –î–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç–∞
     * @param {boolean} isReference - –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–æ–π
     * @returns {HTMLElement} - DOM —ç–ª–µ–º–µ–Ω—Ç
     */
    createNoteElement(item, isReference) {
        const noteElement = document.createElement('div');
        noteElement.className = `note ${isReference ? 'reference' : ''}`;
        noteElement.setAttribute('data-note-id', isReference ? item._reference.id : item.id);
        noteElement.setAttribute('data-block-id', item.id);
        noteElement.setAttribute('data-is-reference', isReference.toString());
        
        noteElement.style.left = item.position.x + 'px';
        noteElement.style.top = item.position.y + 'px';

        // –°–æ–∑–¥–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        const title = document.createElement('div');
        title.className = 'note-title';
        title.textContent = item.title || '–ù–æ–≤—ã–π –±–ª–æ–∫';

        const preview = document.createElement('div');
        preview.className = 'note-preview';
        if (item.content && item.content.trim()) {
            preview.textContent = item.content;
        } else {
            preview.textContent = '–ü—É—Å—Ç–æ–π –±–ª–æ–∫';
            preview.classList.add('empty');
        }

        // –°–æ–∑–¥–∞—Ç—å —Ç–µ–≥–∏
        const tagsContainer = document.createElement('div');
        tagsContainer.className = 'note-tags';
        this.renderItemTags(tagsContainer, item.tags || []);

        const openBtn = document.createElement('button');
        openBtn.className = 'note-open-btn';
        openBtn.textContent = '–û—Ç–∫—Ä—ã—Ç—å';

        // –°–æ–∑–¥–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è
        const actions = document.createElement('div');
        actions.className = 'note-actions';

        const dragHandle = document.createElement('button');
        dragHandle.className = 'drag-handle';
        dragHandle.title = '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç—å';

        const duplicateBtn = document.createElement('button');
        duplicateBtn.className = 'note-action-btn duplicate';
        duplicateBtn.innerHTML = '‚ßâ';
        duplicateBtn.title = isReference ? '–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É' : '–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –±–ª–æ–∫';

        const deleteBtn = document.createElement('button');
        deleteBtn.className = 'note-action-btn delete';
        deleteBtn.innerHTML = 'üóë';
        deleteBtn.title = isReference ? '–£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É' : '–£–¥–∞–ª–∏—Ç—å –±–ª–æ–∫';

        actions.appendChild(dragHandle);
        actions.appendChild(duplicateBtn);
        actions.appendChild(deleteBtn);

        // –°–æ–±—Ä–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç
        noteElement.appendChild(title);
        noteElement.appendChild(preview);
        noteElement.appendChild(tagsContainer);
        noteElement.appendChild(openBtn);
        noteElement.appendChild(actions);

        return noteElement;
    }

    /**
     * –û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Ç–µ–≥–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
     * @param {HTMLElement} container - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–µ–≥–æ–≤
     * @param {Array} tags - –ú–∞—Å—Å–∏–≤ —Ç–µ–≥–æ–≤
     */
    renderItemTags(container, tags) {
        container.innerHTML = '';
        
        if (!tags || tags.length === 0) return;

        tags.forEach(tag => {
            const tagElement = document.createElement('span');
            tagElement.className = 'note-tag';
            tagElement.textContent = tag;
            tagElement.style.backgroundColor = this.getTagColor(tag);
            container.appendChild(tagElement);
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–º–µ—Ç–∫–∏
     * @param {HTMLElement} noteElement - DOM —ç–ª–µ–º–µ–Ω—Ç
     * @param {string} itemId - ID —ç–ª–µ–º–µ–Ω—Ç–∞
     * @param {boolean} isReference - –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–æ–π
     * @param {string} roleId - ID —Ä–æ–ª–∏ (–¥–ª—è —Å—Å—ã–ª–æ–∫)
     */
    setupNoteEvents(noteElement, itemId, isReference, roleId = null) {
        const openBtn = noteElement.querySelector('.note-open-btn');
        const dragHandle = noteElement.querySelector('.drag-handle');
        const duplicateBtn = noteElement.querySelector('.note-action-btn.duplicate');
        const deleteBtn = noteElement.querySelector('.note-action-btn.delete');

        // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        openBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            if (isReference) {
                const blockId = noteElement.getAttribute('data-block-id');
                this.openNoteModal(blockId);
            } else {
                this.openNoteModal(itemId);
            }
        });

        // –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
        dragHandle.addEventListener('mousedown', (e) => {
            this.startDragging(itemId, noteElement, e, isReference, roleId);
        });

        // –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        duplicateBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            if (isReference) {
                this.duplicateReference(roleId, itemId);
            } else {
                this.duplicateBlock(itemId);
            }
        });

        // –£–¥–∞–ª–µ–Ω–∏–µ
        deleteBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            const confirmMessage = isReference ? 
                '–£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –±–ª–æ–∫?' : 
                '–£–¥–∞–ª–∏—Ç—å –±–ª–æ–∫? –≠—Ç–æ —Ç–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–µ–≥–æ.';
                
            if (confirm(confirmMessage)) {
                this.deleteItem(itemId);
            }
        });
    }

    /**
     * –î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –±–ª–æ–∫
     * @param {string} blockId - ID –±–ª–æ–∫–∞
     */
    duplicateBlock(blockId) {
        const originalBlock = this.state.get('blocks').find(b => b.id === blockId);
        
        if (originalBlock) {
            const newBlock = this.state.createBlock({
                title: originalBlock.title + ' (–∫–æ–ø–∏—è)',
                content: originalBlock.content,
                tags: [...(originalBlock.tags || [])],
                position: {
                    x: originalBlock.position.x + 20,
                    y: originalBlock.position.y + 20
                }
            });
            
            this.events.emit('note:duplicated', { 
                original: originalBlock, 
                duplicate: newBlock 
            });
        }
    }

    /**
     * –î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É
     * @param {string} roleId - ID —Ä–æ–ª–∏
     * @param {string} referenceId - ID —Å—Å—ã–ª–∫–∏
     */
    duplicateReference(roleId, referenceId) {
        const reference = this.findReferenceById(roleId, referenceId);
        
        if (reference) {
            const newPosition = {
                x: reference.position.x + 20,
                y: reference.position.y + 20
            };
            
            this.state.createReference(roleId, reference.blockId, newPosition);
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–ª–æ–∫–∏
     */
    updateAllReferences() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º—ã–µ —Å—Å—ã–ª–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–ª–æ–∫–æ–≤
        document.querySelectorAll('.note.reference').forEach(element => {
            const blockId = element.getAttribute('data-block-id');
            if (blockId) {
                this.updateReferenceElement(element, blockId);
            }
        });
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è —Ç–µ–≥–∞
     * @param {string} tag - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞
     * @returns {string} - –¶–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ hex
     */
    getTagColor(tag) {
        const colors = [
            '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FECA57',
            '#FF9FF3', '#54A0FF', '#5F27CD', '#00D2D3', '#FF9F43',
            '#FD79A8', '#6C5CE7', '#A29BFE', '#74B9FF', '#0984E3',
            '#00B894', '#00CEC9', '#E17055', '#FDCB6E', '#E84393'
        ];
        
        let hash = 0;
        for (let i = 0; i < tag.length; i++) {
            const char = tag.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash;
        }
        
        const colorIndex = Math.abs(hash) % colors.length;
        return colors[colorIndex];
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     * @param {string} blockId - ID –±–ª–æ–∫–∞ (–Ω–µ —Å—Å—ã–ª–∫–∏!)
     */
    openNoteModal(blockId) {
        const block = this.state.get('blocks').find(b => b.id === blockId);
        if (!block) return;

        this.createModal(block);
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
     * @param {Object} block - –ë–ª–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    createModal(block) {
        const modalOverlay = document.createElement('div');
        modalOverlay.className = 'modal-overlay';
        modalOverlay.id = 'noteModal';

        const tagsString = (block.tags || []).join(', ');

        modalOverlay.innerHTML = `
            <div class="modal">
                <div class="modal-header">
                    <input type="text" class="modal-title-input" 
                           placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞" 
                           value="${this.escapeHtml(block.title)}" 
                           maxlength="100">
                </div>
                <div class="modal-body">
                    <div class="modal-tags-section">
                        <div class="modal-tags-header">
                            <span class="modal-tags-label">–¢–µ–≥–∏</span>
                            <button class="modal-tags-btn" id="tagsToggleBtn">
                                ${block.tags?.length ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–≥–∏' : '–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥–∏'}
                            </button>
                        </div>
                        
                        <div class="modal-tags-display" id="tagsDisplay"></div>
                        
                        <div class="modal-tags-input-section" id="tagsInputSection">
                            <input type="text" class="modal-tags-input" 
                                   placeholder="–î–æ–±–∞–≤—å—Ç–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é"
                                   value="${this.escapeHtml(tagsString)}"
                                   id="tagsInput">
                            <div class="modal-tags-preview" id="tagsPreview"></div>
                        </div>
                    </div>
                    <textarea class="modal-content-textarea" 
                              placeholder="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–ª–æ–∫–∞...">${this.escapeHtml(block.content)}</textarea>
                </div>
                <div class="modal-footer">
                    <button class="modal-btn modal-btn-secondary" onclick="closeNoteModal()">
                        –û—Ç–º–µ–Ω–∞
                    </button>
                    <button class="modal-btn modal-btn-primary" onclick="saveNoteModal('${block.id}')">
                        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                    </button>
                </div>
            </div>
        `;

        document.body.appendChild(modalOverlay);

        // –§–æ–∫—É—Å –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        setTimeout(() => {
            const titleInput = modalOverlay.querySelector('.modal-title-input');
            titleInput.focus();
            titleInput.select();
            this.updateTagsDisplay(modalOverlay);
        }, 100);

        this.setupModalEvents(modalOverlay, block.id);
        this.events.emit('note:modal-opened', block.id);
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     * @param {HTMLElement} modalOverlay - –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
     * @param {string} blockId - ID –±–ª–æ–∫–∞
     */
    setupModalEvents(modalOverlay, blockId) {
        const tagsToggleBtn = modalOverlay.querySelector('#tagsToggleBtn');
        const tagsInputSection = modalOverlay.querySelector('#tagsInputSection');
        const tagsInput = modalOverlay.querySelector('#tagsInput');
        const tagsDisplay = modalOverlay.querySelector('#tagsDisplay');
        const tagsPreview = modalOverlay.querySelector('#tagsPreview');
        
        let isEditingTags = false;

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–≥–æ–≤
        tagsToggleBtn.addEventListener('click', (e) => {
            e.preventDefault();
            isEditingTags = !isEditingTags;
            
            if (isEditingTags) {
                tagsInputSection.classList.add('visible');
                tagsToggleBtn.textContent = '–°–∫—Ä—ã—Ç—å —Ç–µ–≥–∏';
                tagsToggleBtn.classList.add('editing');
                // –°–∫—Ä—ã—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                tagsDisplay.style.display = 'none';
                tagsInput.focus();
            } else {
                tagsInputSection.classList.remove('visible');
                tagsToggleBtn.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–≥–∏';
                tagsToggleBtn.classList.remove('editing');
                // –ü–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                tagsDisplay.style.display = 'flex';
                // –û–±–Ω–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ —Ç–µ–≥–∞–º–∏
                this.updateTagsDisplay(modalOverlay);
                // –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–µ–≤—å—é
                tagsPreview.innerHTML = '';
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–≥–æ–≤ - —Ç–æ–ª—å–∫–æ –ø—Ä–µ–≤—å—é, –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        tagsInput.addEventListener('input', () => {
            if (isEditingTags) {
                this.updateTagsPreview(modalOverlay);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –≤ –ø–æ–ª–µ —Ç–µ–≥–æ–≤
        tagsInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                tagsInput.blur();
            }
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –æ–≤–µ—Ä–ª–µ–π
        modalOverlay.addEventListener('click', (e) => {
            if (e.target === modalOverlay) {
                this.closeNoteModal();
            }
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
        const escapeHandler = (e) => {
            if (e.key === 'Escape') {
                this.closeNoteModal();
                document.removeEventListener('keydown', escapeHandler);
            }
        };
        document.addEventListener('keydown', escapeHandler);
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–≥–æ–≤
     * @param {HTMLElement} modalOverlay - –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
     */
    updateTagsDisplay(modalOverlay) {
        const tagsDisplay = modalOverlay.querySelector('#tagsDisplay');
        const tagsInput = modalOverlay.querySelector('#tagsInput');
        
        if (!tagsDisplay || !tagsInput) return;
        
        const tagsString = tagsInput.value.trim();
        const tags = tagsString ? tagsString.split(',').map(tag => tag.trim()).filter(tag => tag) : [];
        
        tagsDisplay.innerHTML = '';
        
        if (tags.length === 0) {
            tagsDisplay.innerHTML = '<span class="empty-tags-message">–¢–µ–≥–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</span>';
            return;
        }
        
        tags.forEach((tag) => {
            const tagElement = document.createElement('span');
            tagElement.className = 'modal-tag';
            tagElement.style.backgroundColor = this.getTagColor(tag);
            tagElement.innerHTML = `
                ${this.escapeHtml(tag)}
                <button class="modal-tag-remove" data-tag="${this.escapeHtml(tag)}">√ó</button>
            `;
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞
            const removeBtn = tagElement.querySelector('.modal-tag-remove');
            removeBtn.addEventListener('click', (e) => {
                e.preventDefault();
                this.removeTag(modalOverlay, tag);
            });
            
            tagsDisplay.appendChild(tagElement);
        });
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–≤—å—é —Ç–µ–≥–æ–≤ –ø—Ä–∏ –≤–≤–æ–¥–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
     * @param {HTMLElement} modalOverlay - –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
     */
    updateTagsPreview(modalOverlay) {
        const tagsPreview = modalOverlay.querySelector('#tagsPreview');
        const tagsInput = modalOverlay.querySelector('#tagsInput');
        
        if (!tagsPreview || !tagsInput) return;
        
        const tagsString = tagsInput.value.trim();
        const tags = tagsString ? tagsString.split(',').map(tag => tag.trim()).filter(tag => tag) : [];
        
        tagsPreview.innerHTML = '';
        
        if (tags.length === 0) return;
        
        tags.forEach((tag) => {
            const tagElement = document.createElement('span');
            tagElement.className = 'modal-tag';
            tagElement.style.backgroundColor = this.getTagColor(tag);
            tagElement.textContent = tag;
            tagsPreview.appendChild(tagElement);
        });
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å —Ç–µ–≥
     * @param {HTMLElement} modalOverlay - –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
     * @param {string} tagToRemove - –¢–µ–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
     */
    removeTag(modalOverlay, tagToRemove) {
        const tagsInput = modalOverlay.querySelector('#tagsInput');
        const tagsInputSection = modalOverlay.querySelector('#tagsInputSection');
        
        if (!tagsInput) return;
        
        const tags = tagsInput.value.split(',').map(tag => tag.trim()).filter(tag => tag && tag !== tagToRemove);
        tagsInput.value = tags.join(', ');
        
        // –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–µ–≤—å—é
        if (tagsInputSection && tagsInputSection.classList.contains('visible')) {
            this.updateTagsPreview(modalOverlay);
        } else {
            // –ï—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –æ–±–Ω–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            this.updateTagsDisplay(modalOverlay);
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     * @param {string} blockId - ID –±–ª–æ–∫–∞
     * @param {string} title - –ó–∞–≥–æ–ª–æ–≤–æ–∫
     * @param {string} content - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
     * @param {string} tagsString - –°—Ç—Ä–æ–∫–∞ —Å —Ç–µ–≥–∞–º–∏
     */
    saveNoteFromModal(blockId, title, content, tagsString) {
        const tags = tagsString ? 
            tagsString.split(',').map(tag => tag.trim()).filter(tag => tag) : 
            [];

        const updates = {
            title: title.trim() || '–ù–æ–≤—ã–π –±–ª–æ–∫',
            content: content.trim(),
            tags: tags
        };
        
        this.updateBlock(blockId, updates);
        this.events.emit('note:updated-from-modal', { blockId, updates });
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
     */
    closeNoteModal() {
        const modal = document.getElementById('noteModal');
        if (modal) {
            modal.remove();
            this.events.emit('note:modal-closed');
        }
    }

    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
     * @param {string} text - –¢–µ–∫—Å—Ç
     * @returns {string} - –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
     */
    escapeHtml(text) {
        if (!text) return '';
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    // –ú–µ—Ç–æ–¥—ã –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–ª–æ–∫–∞–º–∏/—Å—Å—ã–ª–∫–∞–º–∏
    startDragging(itemId, noteElement, e, isReference, roleId) {
        this.state.set('canvas.isDragging', true);
        this.state.set('interaction.dragItem', {
            id: itemId,
            type: isReference ? 'reference' : 'block',
            roleId: roleId
        });
        
        noteElement.classList.add('dragging');
        
        const rect = noteElement.getBoundingClientRect();
        this.state.set('interaction.dragOffset', {
            x: e.clientX - rect.left,
            y: e.clientY - rect.top
        });

        e.preventDefault();
        e.stopPropagation();
        
        this.events.emit('note:drag-start', { 
            itemId, 
            isReference, 
            position: { x: e.clientX, y: e.clientY } 
        });
    }

    setupGlobalDragEvents() {
        document.addEventListener('mousemove', (e) => {
            const dragItem = this.state.get('interaction.dragItem');
            if (this.state.get('canvas.isDragging') && dragItem) {
                this.handleDragMove(e, dragItem);
            }
        });

        document.addEventListener('mouseup', () => {
            this.handleDragEnd();
        });
    }

    handleDragMove(e, dragItem) {
        const canvasRect = this.canvas.getBoundingClientRect();
        const dragOffset = this.state.get('interaction.dragOffset');
        
        const x = e.clientX - canvasRect.left - dragOffset.x;
        const y = e.clientY - canvasRect.top - dragOffset.y;
        
        const newPosition = {
            x: Math.max(0, x),
            y: Math.max(0, y)
        };
        
        this.updateItemPosition(dragItem, newPosition);
        this.events.emit('note:drag-move', { dragItem, position: newPosition });
    }

    updateItemPosition(dragItem, position) {
        // –û–±–Ω–æ–≤–∏—Ç—å DOM –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        const noteElement = document.querySelector(`[data-note-id="${dragItem.id}"]`);
        if (noteElement) {
            noteElement.style.left = position.x + 'px';
            noteElement.style.top = position.y + 'px';
        }
        
        // –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å debounce
        clearTimeout(this.positionUpdateTimeout);
        this.positionUpdateTimeout = setTimeout(() => {
            if (dragItem.type === 'block') {
                this.updateBlock(dragItem.id, { position });
            } else if (dragItem.type === 'reference') {
                this.updateReferencePosition(dragItem.roleId, dragItem.id, position);
            }
        }, 16);
    }

    handleDragEnd() {
        const dragItem = this.state.get('interaction.dragItem');
        
        if (this.state.get('canvas.isDragging') && dragItem) {
            const noteElement = document.querySelector(`[data-note-id="${dragItem.id}"]`);
            if (noteElement) {
                noteElement.classList.remove('dragging');
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
                clearTimeout(this.positionUpdateTimeout);
                const finalPosition = {
                    x: parseInt(noteElement.style.left),
                    y: parseInt(noteElement.style.top)
                };
                
                if (dragItem.type === 'block') {
                    this.updateBlock(dragItem.id, { position: finalPosition });
                } else if (dragItem.type === 'reference') {
                    this.updateReferencePosition(dragItem.roleId, dragItem.id, finalPosition);
                }
            }
            
            this.state.set('canvas.isDragging', false);
            this.state.set('interaction.dragItem', null);
            
            this.events.emit('note:drag-end', { dragItem });
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥—É–ª—è v2.0
     * @returns {Object} - –û–±—ä–µ–∫—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
     */
    getStats() {
        const blocks = this.state.get('blocks');
        const roles = this.state.get('roles');
        const totalReferences = Object.values(roles).reduce(
            (sum, role) => sum + (role.references?.length || 0), 0
        );
        
        const totalCharacters = blocks.reduce((sum, block) => sum + (block.content?.length || 0), 0);
        
        return {
            version: '2.0',
            totalBlocks: blocks.length,
            totalReferences,
            totalCharacters,
            averageBlockLength: blocks.length > 0 ? Math.round(totalCharacters / blocks.length) : 0,
            emptyBlocks: blocks.filter(block => !block.content?.trim()).length,
            blocksWithTags: blocks.filter(block => block.tags?.length > 0).length
        };
    }
}