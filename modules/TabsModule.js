/**
 * Tabs Module - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –≤–∫–ª–∞–¥–æ–∫ –∏ —Ä–æ–ª–µ–π
 */
export class TabsModule {
    constructor(state, events) {
        this.state = state;
        this.events = events;
        this.tabsContainer = null;
        this.roleModal = null;
        
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
     */
    init() {
        this.createTabsContainer();
        this.createRoleModal();
        this.setupEventListeners();
        this.setupStateWatchers();
        this.renderTabs();
        
        console.log('üìë Tabs module initialized');
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤–∫–ª–∞–¥–æ–∫
     */
    createTabsContainer() {
        this.tabsContainer = document.createElement('div');
        this.tabsContainer.className = 'tabs-container';
        
        this.tabsContainer.innerHTML = `
            <div class="tabs-header">
                <div class="tab main-tree active" data-tab="main">
                    <span class="tab-icon">üå≥</span>
                    <span>–û—Å–Ω–æ–≤–Ω–æ–µ –¥–µ—Ä–µ–≤–æ</span>
                    <span class="tab-count">0</span>
                </div>
                <button class="add-role-btn" id="addRoleBtn">
                    <span>+</span>
                    <span>–î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å</span>
                </button>
            </div>
        `;
        
        // –í—Å—Ç–∞–≤–∏—Ç—å –≤ –Ω–∞—á–∞–ª–æ body
        document.body.insertBefore(this.tabsContainer, document.body.firstChild);
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–µ–π
     */
    createRoleModal() {
        this.roleModal = document.createElement('div');
        this.roleModal.className = 'role-modal-overlay';
        this.roleModal.id = 'roleModal';
        
        this.roleModal.innerHTML = `
            <div class="role-modal">
                <div class="role-modal-header">
                    <h2 class="role-modal-title">–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ä–æ–ª—å</h2>
                    <p class="role-modal-subtitle">–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏</p>
                </div>
                <div class="role-modal-body">
                    <div class="role-input-group">
                        <label class="role-input-label" for="roleNameInput">–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏</label>
                        <input type="text" id="roleNameInput" class="role-input" 
                               placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –ö–ª–∏–µ–Ω—Ç, –ü–∞—Ä—Ç–Ω–µ—Ä..." 
                               maxlength="20">
                    </div>
                    <div class="role-suggestions">
                        <div class="role-suggestion" data-role="üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä">üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</div>
                        <div class="role-suggestion" data-role="üë§ –ö–ª–∏–µ–Ω—Ç">üë§ –ö–ª–∏–µ–Ω—Ç</div>
                        <div class="role-suggestion" data-role="ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä">ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä</div>
                        <div class="role-suggestion" data-role="üîß –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞">üîß –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞</div>
                        <div class="role-suggestion" data-role="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫">üìä –ê–Ω–∞–ª–∏—Ç–∏–∫</div>
                    </div>
                </div>
                <div class="role-modal-footer">
                    <button class="role-modal-btn role-modal-btn-secondary" id="cancelRoleBtn">
                        –û—Ç–º–µ–Ω–∞
                    </button>
                    <button class="role-modal-btn role-modal-btn-primary" id="saveRoleBtn" disabled>
                        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–æ–ª—å
                    </button>
                </div>
            </div>
        `;
        
        document.body.appendChild(this.roleModal);
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏
        const addRoleBtn = document.getElementById('addRoleBtn');
        addRoleBtn.addEventListener('click', () => this.openRoleModal());

        // –°–æ–±—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        this.setupModalEvents();
        
        // –ö–ª–∏–∫–∏ –ø–æ –≤–∫–ª–∞–¥–∫–∞–º (–¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)
        this.tabsContainer.addEventListener('click', (e) => {
            const tab = e.target.closest('.tab');
            if (tab && !e.target.classList.contains('tab-remove')) {
                this.switchToTab(tab.dataset.tab);
            }
        });

        // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        document.addEventListener('keydown', (e) => {
            this.handleKeydown(e);
        });

        // –°–æ–±—ã—Ç–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
        this.events.on('block:created', () => this.updateTabCounts());
        this.events.on('block:deleted', () => this.updateTabCounts());
        this.events.on('reference:created', () => this.updateTabCounts());
        this.events.on('reference:deleted', () => this.updateTabCounts());
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    setupModalEvents() {
        const roleNameInput = document.getElementById('roleNameInput');
        const cancelRoleBtn = document.getElementById('cancelRoleBtn');
        const saveRoleBtn = document.getElementById('saveRoleBtn');

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
        roleNameInput.addEventListener('input', (e) => {
            const value = e.target.value.trim();
            saveRoleBtn.disabled = value.length === 0;
        });

        // Enter –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        roleNameInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !saveRoleBtn.disabled) {
                this.createRole(roleNameInput.value.trim());
            }
        });

        // –ö–Ω–æ–ø–∫–∏
        cancelRoleBtn.addEventListener('click', () => this.closeRoleModal());
        saveRoleBtn.addEventListener('click', () => {
            const roleName = roleNameInput.value.trim();
            if (roleName) {
                this.createRole(roleName);
            }
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –æ–≤–µ—Ä–ª–µ—é
        this.roleModal.addEventListener('click', (e) => {
            if (e.target === this.roleModal) {
                this.closeRoleModal();
            }
        });

        // –ü–æ–¥—Å–∫–∞–∑–∫–∏
        document.querySelectorAll('.role-suggestion').forEach(suggestion => {
            suggestion.addEventListener('click', () => {
                const roleText = suggestion.dataset.role;
                const roleName = roleText.substring(2).trim(); // –£–±—Ä–∞—Ç—å —ç–º–æ–¥–∑–∏
                roleNameInput.value = roleName;
                saveRoleBtn.disabled = false;
                roleNameInput.focus();
            });
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    setupStateWatchers() {
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–æ–ª–µ–π
        this.state.watch('roles', () => {
            this.renderTabs();
        });

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
        this.state.watch('ui.activeTab', (newTab, oldTab) => {
            this.updateActiveTab(newTab, oldTab);
        });

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–ª–æ–∫–æ–≤ –∏ —Å—Å—ã–ª–æ–∫ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–æ–≤
        this.state.watch('blocks', () => this.updateTabCounts());
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
     * @param {KeyboardEvent} e - –°–æ–±—ã—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
     */
    handleKeydown(e) {
        // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        if (document.getElementById('roleModal').classList.contains('visible')) {
            if (e.key === 'Escape') {
                this.closeRoleModal();
            }
            return;
        }

        // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        if (e.ctrlKey || e.metaKey) {
            switch (e.key) {
                case '1':
                    e.preventDefault();
                    this.switchToTab('main');
                    break;
                case '2':
                case '3':
                case '4':
                case '5':
                    e.preventDefault();
                    const roleIndex = parseInt(e.key) - 2;
                    const roleIds = this.getRoleIds();
                    if (roleIds[roleIndex]) {
                        this.switchToTab(roleIds[roleIndex]);
                    }
                    break;
                case 't':
                    e.preventDefault();
                    this.openRoleModal();
                    break;
            }
        }
    }

    /**
     * –û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
     */
    renderTabs() {
        const tabsHeader = this.tabsContainer.querySelector('.tabs-header');
        const addRoleBtn = document.getElementById('addRoleBtn');
        
        // –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ä–æ–ª–∏ (–∫—Ä–æ–º–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –∏ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è)
        const roleTabs = tabsHeader.querySelectorAll('.tab:not(.main-tree)');
        roleTabs.forEach(tab => tab.remove());
        
        // –î–æ–±–∞–≤–∏—Ç—å –≤–∫–ª–∞–¥–∫–∏ —Ä–æ–ª–µ–π
        const roles = this.state.get('roles');
        Object.values(roles).forEach(role => {
            this.createRoleTab(role, addRoleBtn);
        });
        
        this.updateTabCounts();
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –≤–∫–ª–∞–¥–∫—É —Ä–æ–ª–∏
     * @param {Object} role - –î–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏
     * @param {HTMLElement} insertBefore - –≠–ª–µ–º–µ–Ω—Ç, –ø–µ—Ä–µ–¥ –∫–æ—Ç–æ—Ä—ã–º –≤—Å—Ç–∞–≤–∏—Ç—å
     */
    createRoleTab(role, insertBefore) {
        const tab = document.createElement('div');
        tab.className = `tab ${role.isDefault ? '' : 'custom'}`;
        tab.setAttribute('data-tab', role.id);
        
        tab.innerHTML = `
            <span class="tab-icon">${role.icon}</span>
            <span>${role.name}</span>
            <span class="tab-count">0</span>
            ${!role.isDefault ? '<button class="tab-remove" title="–£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å">√ó</button>' : ''}
        `;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ä–æ–ª–µ–π
        if (!role.isDefault) {
            const removeBtn = tab.querySelector('.tab-remove');
            removeBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                this.deleteRole(role.id, role.name);
            });
        }

        insertBefore.parentNode.insertBefore(tab, insertBefore);
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É
     * @param {string} tabId - ID –≤–∫–ª–∞–¥–∫–∏
     */
    switchToTab(tabId) {
        const currentTab = this.state.get('ui.activeTab');
        if (currentTab === tabId) return;

        this.state.switchTab(tabId);
        
        // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
        this.events.emit('tab:switched', { 
            from: currentTab, 
            to: tabId,
            isMainTree: tabId === 'main'
        });
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É –≤ UI
     * @param {string} newTab - –ù–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞
     * @param {string} oldTab - –ü—Ä–µ–¥—ã–¥—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞
     */
    updateActiveTab(newTab, oldTab) {
        // –û–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞—Å—Å—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        document.querySelectorAll('.tab').forEach(tab => {
            tab.classList.remove('active');
        });
        
        const activeTab = document.querySelector(`[data-tab="${newTab}"]`);
        if (activeTab) {
            activeTab.classList.add('active');
        }

        // –£–≤–µ–¥–æ–º–∏—Ç—å –æ —Å–º–µ–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        const isMainTree = newTab === 'main';
        this.events.emit('tab:context-changed', {
            tabId: newTab,
            isMainTree,
            canCreateBlocks: isMainTree,
            canCreateReferences: !isMainTree
        });
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–æ –≤–∫–ª–∞–¥–∫–∞—Ö
     */
    updateTabCounts() {
        // –°—á–µ—Ç—á–∏–∫ –±–ª–æ–∫–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –¥–µ—Ä–µ–≤–µ
        const blocksCount = this.state.get('blocks').length;
        const mainTreeTab = document.querySelector('[data-tab="main"] .tab-count');
        if (mainTreeTab) {
            mainTreeTab.textContent = blocksCount;
        }

        // –°—á–µ—Ç—á–∏–∫–∏ —Å—Å—ã–ª–æ–∫ –≤ —Ä–æ–ª—è—Ö
        const roles = this.state.get('roles');
        Object.values(roles).forEach(role => {
            const referencesCount = role.references?.length || 0;
            const roleTab = document.querySelector(`[data-tab="${role.id}"] .tab-count`);
            if (roleTab) {
                roleTab.textContent = referencesCount;
            }
        });
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏
     */
    openRoleModal() {
        this.roleModal.classList.add('visible');
        
        // –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É
        const roleNameInput = document.getElementById('roleNameInput');
        const saveRoleBtn = document.getElementById('saveRoleBtn');
        
        roleNameInput.value = '';
        saveRoleBtn.disabled = true;
        
        // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        setTimeout(() => {
            roleNameInput.focus();
        }, 100);

        this.events.emit('role-modal:opened');
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏
     */
    closeRoleModal() {
        this.roleModal.classList.remove('visible');
        this.events.emit('role-modal:closed');
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ä–æ–ª—å
     * @param {string} roleName - –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏
     */
    createRole(roleName) {
        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏
        const roles = this.state.get('roles');
        const nameExists = Object.values(roles).some(role => 
            role.name.toLowerCase() === roleName.toLowerCase()
        );
        
        if (nameExists) {
            alert('–†–æ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            return;
        }

        // –°–æ–∑–¥–∞—Ç—å —Ä–æ–ª—å
        const role = this.state.createRole({
            name: roleName,
            icon: 'üë§'
        });

        // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –Ω–æ–≤—É—é —Ä–æ–ª—å
        this.switchToTab(role.id);
        
        // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.closeRoleModal();

        this.events.emit('role:created-via-ui', { roleId: role.id, role });
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å
     * @param {string} roleId - ID —Ä–æ–ª–∏
     * @param {string} roleName - –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏
     */
    deleteRole(roleId, roleName) {
        if (!confirm(`–£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å "${roleName}"?`)) {
            return;
        }

        // –£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å —á–µ—Ä–µ–∑ state manager
        this.state.deleteRole(roleId);

        this.events.emit('role:deleted-via-ui', { roleId, roleName });
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ ID —Ä–æ–ª–µ–π (–¥–ª—è –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à)
     * @returns {Array} - –ú–∞—Å—Å–∏–≤ ID —Ä–æ–ª–µ–π
     */
    getRoleIds() {
        const roles = this.state.get('roles');
        return Object.keys(roles).filter(id => roles[id].isDefault);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–µ
     * @returns {Object} - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∫–ª–∞–¥–∫–µ
     */
    getCurrentTabInfo() {
        const activeTab = this.state.get('ui.activeTab');
        
        if (activeTab === 'main') {
            return {
                id: 'main',
                name: '–û—Å–Ω–æ–≤–Ω–æ–µ –¥–µ—Ä–µ–≤–æ',
                type: 'main',
                isMainTree: true,
                canCreateBlocks: true,
                canCreateReferences: false,
                itemsCount: this.state.get('blocks').length
            };
        } else {
            const role = this.state.get(`roles.${activeTab}`);
            return {
                id: activeTab,
                name: role?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å',
                type: 'role',
                isMainTree: false,
                canCreateBlocks: false,
                canCreateReferences: true,
                itemsCount: role?.references?.length || 0,
                role: role
            };
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥—É–ª—è
     * @returns {Object} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
     */
    getStats() {
        const roles = this.state.get('roles');
        const totalRoles = Object.keys(roles).length;
        const customRoles = Object.values(roles).filter(r => !r.isDefault).length;
        const totalReferences = Object.values(roles).reduce(
            (sum, role) => sum + (role.references?.length || 0), 0
        );

        return {
            totalTabs: totalRoles + 1, // +1 –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞
            totalRoles,
            defaultRoles: totalRoles - customRoles,
            customRoles,
            totalReferences,
            activeTab: this.state.get('ui.activeTab')
        };
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–æ–¥—É–ª—è
     */
    destroy() {
        if (this.tabsContainer) {
            this.tabsContainer.remove();
        }
        if (this.roleModal) {
            this.roleModal.remove();
        }
        
        console.log('üóëÔ∏è Tabs module destroyed');
    }
}