/**
 * Tabs Module - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –≤–∫–ª–∞–¥–æ–∫ –∏ —Ä–æ–ª–µ–π
 * v3.0 - –ù–æ–≤—ã–π –¥–∏–∑–∞–π–Ω —Ö–µ–¥–µ—Ä–∞ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –∏ dropdown –º–µ–Ω—é
 * –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ö–µ–¥–µ—Ä —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞, –ª–æ–≥–æ—Ç–∏–ø–æ–º –∏ –≤—ã–ø–∞–¥–∞—é—â–∏–º –º–µ–Ω—é
 */
export class TabsModule {
    constructor(state, events) {
        this.state = state;
        this.events = events;
        this.tabsContainer = null;
        this.roleModal = null;
        this.deleteConfirmModal = null;
        this.loadConfirmModal = null;
        this.projectInfoModal = null;
        this.pendingProjectData = null;
        this.themeToggleBtn = null;
        this.currentProjectName = '–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ò–¥–µ—è'; // –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
     */
    init() {
        this.createTabsContainer();
        this.createRoleModal();
        this.createDeleteConfirmModal();
        this.createLoadConfirmModal();
        this.createProjectInfoModal();
        this.setupEventListeners();
        this.setupStateWatchers();
        this.renderTabs();
        
        console.log('üìë Tabs module v3.0 initialized');
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤–∫–ª–∞–¥–æ–∫ —Å –Ω–æ–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º
     */
    createTabsContainer() {
        this.tabsContainer = document.createElement('div');
        this.tabsContainer.className = 'tabs-container';
        
        this.tabsContainer.innerHTML = `
            <div class="tabs-header">
                <!-- –õ–æ–≥–æ—Ç–∏–ø –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ -->
                <div class="project-branding">
                    <div class="project-logo">
                        <img src="assets/images/logo.png" alt="Logo" class="logo-image">
                    </div>
                    <div class="project-info">
                        <h1 class="project-name" id="projectName">${this.currentProjectName}</h1>
                        <button class="project-dropdown-btn" id="projectDropdownBtn" title="–ú–µ–Ω—é –ø—Ä–æ–µ–∫—Ç–∞">
                            <img src="assets/icons/chevron-down.svg" alt="Menu" class="dropdown-icon">
                        </button>
                    </div>
                </div>

                <!-- Dropdown –º–µ–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ -->
                <div class="project-dropdown" id="projectDropdown">
                    <div class="dropdown-content">
                        <button class="dropdown-item" id="saveProjectBtn">
                            <span class="item-icon">üíæ</span>
                            <span class="item-text">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç</span>
                        </button>
                        <button class="dropdown-item" id="loadProjectBtn">
                            <span class="item-icon">üìÅ</span>
                            <span class="item-text">–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç</span>
                        </button>
                        <div class="dropdown-divider"></div>
                        <button class="dropdown-item" id="projectInfoBtn">
                            <span class="item-icon">üìä</span>
                            <span class="item-text">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ</span>
                        </button>
                        <button class="dropdown-item" id="themeToggleBtn">
                            <span class="item-icon">üåô</span>
                            <span class="item-text">–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É</span>
                        </button>
                    </div>
                </div>

                <!-- –í–∫–ª–∞–¥–∫–∏ -->
                <div class="tabs-navigation">
                    <div class="tab main-tree active" data-tab="main">
                        <span class="tab-icon">üå≥</span>
                        <span>–û—Å–Ω–æ–≤–Ω–æ–µ –¥–µ—Ä–µ–≤–æ</span>
                        <span class="tab-count">0</span>
                    </div>
                    <button class="add-role-btn" id="addRoleBtn">
                        <span>+</span>
                        <span>–î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å</span>
                    </button>
                </div>
            </div>
        `;
        
        // –í—Å—Ç–∞–≤–∏—Ç—å –≤ –Ω–∞—á–∞–ª–æ body
        document.body.insertBefore(this.tabsContainer, document.body.firstChild);
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ
     */
    createProjectInfoModal() {
        this.projectInfoModal = document.createElement('div');
        this.projectInfoModal.className = 'project-info-overlay';
        this.projectInfoModal.id = 'projectInfoModal';
        
        this.projectInfoModal.innerHTML = `
            <div class="project-info-modal">
                <div class="modal-header">
                    <div class="modal-title">
                        <span class="modal-icon">üìä</span>
                        <h2>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ</h2>
                    </div>
                    <button class="modal-close-btn" id="closeProjectInfoBtn">
                        <img src="assets/icons/chevron-up.svg" alt="Close" class="close-icon">
                    </button>
                </div>
                <div class="modal-body">
                    <div class="project-info-section">
                        <h3>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞</h3>
                        <div class="project-name-edit">
                            <input type="text" id="projectNameEdit" class="project-name-input" 
                                   value="${this.currentProjectName}" maxlength="50">
                            <button class="name-save-btn" id="saveProjectNameBtn">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                        </div>
                    </div>
                    
                    <div class="project-info-section">
                        <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞</h3>
                        <div class="stats-grid">
                            <div class="stat-item">
                                <div class="stat-icon">üß±</div>
                                <div class="stat-info">
                                    <span class="stat-label">–ë–ª–æ–∫–∏</span>
                                    <span class="stat-value" id="statsBlocks">0</span>
                                </div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-icon">üë•</div>
                                <div class="stat-info">
                                    <span class="stat-label">–†–æ–ª–∏</span>
                                    <span class="stat-value" id="statsRoles">0</span>
                                </div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-icon">üìé</div>
                                <div class="stat-info">
                                    <span class="stat-label">–°—Å—ã–ª–∫–∏</span>
                                    <span class="stat-value" id="statsReferences">0</span>
                                </div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-icon">üîó</div>
                                <div class="stat-info">
                                    <span class="stat-label">–°–≤—è–∑–∏</span>
                                    <span class="stat-value" id="statsConnections">0</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="project-info-section">
                        <h3>–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                        <div class="details-info">
                            <div class="detail-row">
                                <span class="detail-label">–¢–µ–º–∞:</span>
                                <span class="detail-value" id="detailTheme">–°–≤–µ—Ç–ª–∞—è</span>
                            </div>
                            <div class="detail-row">
                                <span class="detail-label">–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:</span>
                                <span class="detail-value" id="detailLastModified">-</span>
                            </div>
                            <div class="detail-row">
                                <span class="detail-label">–ê–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞:</span>
                                <span class="detail-value" id="detailActiveTab">–û—Å–Ω–æ–≤–Ω–æ–µ –¥–µ—Ä–µ–≤–æ</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(this.projectInfoModal);
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–µ–π
     */
    createRoleModal() {
        this.roleModal = document.createElement('div');
        this.roleModal.className = 'role-modal-overlay';
        this.roleModal.id = 'roleModal';
        
        this.roleModal.innerHTML = `
            <div class="role-modal">
                <div class="role-modal-header">
                    <h2 class="role-modal-title">–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ä–æ–ª—å</h2>
                    <p class="role-modal-subtitle">–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏</p>
                </div>
                <div class="role-modal-body">
                    <div class="role-input-group">
                        <label class="role-input-label" for="roleNameInput">–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏</label>
                        <input type="text" id="roleNameInput" class="role-input" 
                               placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –ö–ª–∏–µ–Ω—Ç, –ü–∞—Ä—Ç–Ω–µ—Ä..." 
                               maxlength="20">
                    </div>
                    <div class="role-input-group">
                        <label class="role-input-label" for="roleIconSelect">–ò–∫–æ–Ω–∫–∞ —Ä–æ–ª–∏</label>
                        <div class="role-icon-grid" id="roleIconGrid">
                            <!-- –ò–∫–æ–Ω–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                        </div>
                    </div>
                </div>
                <div class="role-modal-footer">
                    <button class="role-btn role-btn-secondary" id="cancelRoleBtn">
                        –û—Ç–º–µ–Ω–∞
                    </button>
                    <button class="role-btn role-btn-primary" id="confirmRoleBtn" disabled>
                        –°–æ–∑–¥–∞—Ç—å —Ä–æ–ª—å
                    </button>
                </div>
            </div>
        `;
        
        document.body.appendChild(this.roleModal);
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏
     */
    createDeleteConfirmModal() {
        this.deleteConfirmModal = document.createElement('div');
        this.deleteConfirmModal.className = 'delete-confirm-overlay';
        this.deleteConfirmModal.id = 'deleteConfirmModal';
        
        this.deleteConfirmModal.innerHTML = `
            <div class="delete-confirm-modal">
                <div class="delete-confirm-header">
                    <div class="delete-confirm-icon">‚ö†Ô∏è</div>
                    <h2 class="delete-confirm-title">–£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å?</h2>
                </div>
                <div class="delete-confirm-body">
                    <p class="delete-confirm-message">
                        –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å "<strong id="deleteRoleName">–†–æ–ª—å</strong>"?
                    </p>
                    <div class="delete-confirm-warning">
                        <p>–í—Å–µ —Å—Å—ã–ª–∫–∏ –≤ —Ä–æ–ª–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã, –Ω–æ —Å–∞–º–∏ –±–ª–æ–∫–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –¥–µ—Ä–µ–≤–µ.</p>
                    </div>
                </div>
                <div class="delete-confirm-footer">
                    <button class="delete-confirm-btn delete-confirm-btn-secondary" id="cancelDeleteBtn">
                        –û—Ç–º–µ–Ω–∞
                    </button>
                    <button class="delete-confirm-btn delete-confirm-btn-danger" id="confirmDeleteBtn">
                        –£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å
                    </button>
                </div>
            </div>
        `;
        
        document.body.appendChild(this.deleteConfirmModal);
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
     */
    createLoadConfirmModal() {
        this.loadConfirmModal = document.createElement('div');
        this.loadConfirmModal.className = 'load-confirm-overlay';
        this.loadConfirmModal.id = 'loadConfirmModal';
        
        this.loadConfirmModal.innerHTML = `
            <div class="load-confirm-modal">
                <div class="load-confirm-header">
                    <div class="load-confirm-icon">üìÅ</div>
                    <h2 class="load-confirm-title">–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç?</h2>
                </div>
                <div class="load-confirm-body">
                    <p class="load-confirm-message">
                        –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç "<strong id="loadProjectName">–ü—Ä–æ–µ–∫—Ç</strong>"?
                    </p>
                    <div class="load-confirm-details" id="loadConfirmDetails">
                        <div class="load-detail">
                            <span class="load-detail-label">–ë–ª–æ–∫–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ:</span>
                            <span class="load-detail-value" id="loadBlocksCount">0</span>
                        </div>
                        <div class="load-detail">
                            <span class="load-detail-label">–†–æ–ª–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ:</span>
                            <span class="load-detail-value" id="loadRolesCount">0</span>
                        </div>
                        <div class="load-detail">
                            <span class="load-detail-label">–°–≤—è–∑–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ:</span>
                            <span class="load-detail-value" id="loadConnectionsCount">0</span>
                        </div>
                        <div class="load-detail">
                            <span class="load-detail-label">–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</span>
                            <span class="load-detail-value" id="loadCreatedDate">-</span>
                        </div>
                    </div>
                    <div class="load-confirm-warning">
                        <p>‚ö†Ô∏è <strong>–í–Ω–∏–º–∞–Ω–∏–µ:</strong> –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–º–µ–Ω–∏—Ç –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ (–±–ª–æ–∫–∏, —Ä–æ–ª–∏, —Å–≤—è–∑–∏).
                        –¢–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω.</p>
                    </div>
                </div>
                <div class="load-confirm-footer">
                    <button class="load-confirm-btn load-confirm-btn-secondary" id="cancelLoadBtn">
                        –û—Ç–º–µ–Ω–∞
                    </button>
                    <button class="load-confirm-btn load-confirm-btn-primary" id="confirmLoadBtn">
                        –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
                    </button>
                </div>
            </div>
        `;
        
        document.body.appendChild(this.loadConfirmModal);
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ dropdown –º–µ–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
        const dropdownBtn = document.getElementById('projectDropdownBtn');
        dropdownBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            this.toggleProjectDropdown();
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ dropdown –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
        document.addEventListener('click', (e) => {
            const dropdown = document.getElementById('projectDropdown');
            if (dropdown && !dropdown.contains(e.target)) {
                this.closeProjectDropdown();
            }
        });

        // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏
        const addRoleBtn = document.getElementById('addRoleBtn');
        addRoleBtn.addEventListener('click', () => this.openRoleModal());

        // –ö–Ω–æ–ø–∫–∏ –≤ dropdown –º–µ–Ω—é
        const saveProjectBtn = document.getElementById('saveProjectBtn');
        const loadProjectBtn = document.getElementById('loadProjectBtn');
        const projectInfoBtn = document.getElementById('projectInfoBtn');
        const themeToggleBtn = document.getElementById('themeToggleBtn');
        
        saveProjectBtn.addEventListener('click', () => {
            this.closeProjectDropdown();
            this.saveProject();
        });
        
        loadProjectBtn.addEventListener('click', () => {
            this.closeProjectDropdown();
            this.loadProject();
        });

        projectInfoBtn.addEventListener('click', () => {
            this.closeProjectDropdown();
            this.openProjectInfoModal();
        });

        themeToggleBtn.addEventListener('click', () => {
            this.closeProjectDropdown();
            this.toggleTheme();
        });

        // –°–æ–±—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ
        this.setupProjectInfoModalEvents();
        
        // –°–æ–±—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏
        this.setupRoleModalEvents();
        
        // –°–æ–±—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
        this.setupDeleteConfirmModalEvents();
        
        // –°–æ–±—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        this.setupLoadConfirmModalEvents();
        
        // –ö–ª–∏–∫–∏ –ø–æ –≤–∫–ª–∞–¥–∫–∞–º (–¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)
        const tabsNavigation = this.tabsContainer.querySelector('.tabs-navigation');
        tabsNavigation.addEventListener('click', (e) => {
            const tab = e.target.closest('.tab');
            if (tab && !e.target.classList.contains('tab-remove')) {
                this.switchToTab(tab.dataset.tab);
            }
        });

        // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        this.setupHotkeys();
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å dropdown –º–µ–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
     */
    toggleProjectDropdown() {
        const dropdown = document.getElementById('projectDropdown');
        const isVisible = dropdown.classList.contains('visible');
        
        if (isVisible) {
            this.closeProjectDropdown();
        } else {
            this.openProjectDropdown();
        }
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç—å dropdown –º–µ–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
     */
    openProjectDropdown() {
        const dropdown = document.getElementById('projectDropdown');
        const dropdownBtn = document.getElementById('projectDropdownBtn');
        
        dropdown.classList.add('visible');
        dropdownBtn.classList.add('active');
        
        // –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Ç–µ–º—ã
        this.updateThemeToggleText();
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç—å dropdown –º–µ–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
     */
    closeProjectDropdown() {
        const dropdown = document.getElementById('projectDropdown');
        const dropdownBtn = document.getElementById('projectDropdownBtn');
        
        dropdown.classList.remove('visible');
        dropdownBtn.classList.remove('active');
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ
     */
    openProjectInfoModal() {
        this.updateProjectStats();
        this.projectInfoModal.classList.add('visible');
        
        // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
        setTimeout(() => {
            document.getElementById('projectNameEdit').focus();
        }, 100);
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ
     */
    closeProjectInfoModal() {
        this.projectInfoModal.classList.remove('visible');
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
     */
    updateProjectStats() {
        const blocks = this.state.get('blocks') || [];
        const roles = this.state.get('roles') || {};
        const connections = this.state.get('connections') || [];
        
        // –ü–æ–¥—Å—á–µ—Ç —Å—Å—ã–ª–æ–∫
        const totalReferences = Object.values(roles).reduce(
            (sum, role) => sum + (role.references?.length || 0), 0
        );

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        document.getElementById('statsBlocks').textContent = blocks.length;
        document.getElementById('statsRoles').textContent = Object.keys(roles).length;
        document.getElementById('statsReferences').textContent = totalReferences;
        document.getElementById('statsConnections').textContent = connections.length;

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        const currentTheme = document.body.classList.contains('dark-theme') ? '–¢–µ–º–Ω–∞—è' : '–°–≤–µ—Ç–ª–∞—è';
        document.getElementById('detailTheme').textContent = currentTheme;
        
        const activeTab = this.state.get('ui.activeTab') || 'main';
        const activeTabName = activeTab === 'main' ? '–û—Å–Ω–æ–≤–Ω–æ–µ –¥–µ—Ä–µ–≤–æ' : 
                             (roles[activeTab]?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å');
        document.getElementById('detailActiveTab').textContent = activeTabName;
        
        document.getElementById('detailLastModified').textContent = new Date().toLocaleString('ru-RU');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ
     */
    setupProjectInfoModalEvents() {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const closeBtn = document.getElementById('closeProjectInfoBtn');
        closeBtn.addEventListener('click', () => this.closeProjectInfoModal());

        // –ö–ª–∏–∫ –ø–æ overlay –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        this.projectInfoModal.addEventListener('click', (e) => {
            if (e.target === this.projectInfoModal) {
                this.closeProjectInfoModal();
            }
        });

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        const saveNameBtn = document.getElementById('saveProjectNameBtn');
        const nameInput = document.getElementById('projectNameEdit');
        
        saveNameBtn.addEventListener('click', () => this.saveProjectName());
        
        nameInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                this.saveProjectName();
            }
        });

        nameInput.addEventListener('input', () => {
            const isValid = nameInput.value.trim().length > 0;
            saveNameBtn.disabled = !isValid;
        });
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
     */
    saveProjectName() {
        const nameInput = document.getElementById('projectNameEdit');
        const newName = nameInput.value.trim();
        
        if (newName && newName !== this.currentProjectName) {
            this.currentProjectName = newName;
            document.getElementById('projectName').textContent = newName;
            
            this.events.emit('ui:show-notification', {
                message: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ',
                type: 'success',
                duration: 2000
            });
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
     */
    updateThemeToggleText() {
        const themeBtn = document.getElementById('themeToggleBtn');
        const textElement = themeBtn.querySelector('.item-text');
        const iconElement = themeBtn.querySelector('.item-icon');
        
        const currentTheme = document.body.classList.contains('dark-theme') ? 'dark' : 'light';
        
        if (iconElement) {
            iconElement.textContent = currentTheme === 'dark' ? '‚òÄÔ∏è' : 'üåô';
        }
        
        if (textElement) {
            textElement.textContent = currentTheme === 'dark' ? '–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞' : '–¢–µ–º–Ω–∞—è —Ç–µ–º–∞';
        }
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    toggleTheme() {
        const currentTheme = document.body.classList.contains('dark-theme') ? 'dark' : 'light';
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∫–ª–∞—Å—Å –Ω–∞ body
        if (newTheme === 'dark') {
            document.body.classList.add('dark-theme');
        } else {
            document.body.classList.remove('dark-theme');
        }
        
        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage
        localStorage.setItem('notes-app-theme', newTheme);
        
        // –≠–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ
        this.events.emit('theme:changed', newTheme);
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.events.emit('ui:show-notification', {
            message: `–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${newTheme === 'dark' ? '—Ç–µ–º–Ω—É—é' : '—Å–≤–µ—Ç–ª—É—é'}`,
            type: 'info',
            duration: 2000
        });
        
        console.log(`üé® Theme switched to ${newTheme}`);
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
     */
    setupHotkeys() {
        document.addEventListener('keydown', (e) => {
            // Ctrl/Cmd + S - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
            if ((e.ctrlKey || e.metaKey) && e.key === 's') {
                e.preventDefault();
                this.saveProject();
            }
            
            // Ctrl/Cmd + O - –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
            if ((e.ctrlKey || e.metaKey) && e.key === 'o') {
                e.preventDefault();
                this.loadProject();
            }
            
            // Ctrl/Cmd + I - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
            if ((e.ctrlKey || e.metaKey) && e.key === 'i') {
                e.preventDefault();
                this.openProjectInfoModal();
            }

            // Escape - –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
            if (e.key === 'Escape') {
                this.closeProjectDropdown();
                this.closeProjectInfoModal();
                this.closeRoleModal();
                this.closeDeleteConfirmModal();
                this.closeLoadConfirmModal();
            }
        });
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
     * @param {Object} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @returns {Object} - –û–±—ä–µ–∫—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
     */
    exportData(state) {
        // –°–æ–∑–¥–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
        const metadata = this.createProjectMetadata(state);
        
        return {
            version: '2.0',
            meta: metadata,
            data: {
                blocks: state.blocks || [],
                roles: state.roles || {},
                connections: state.connections || [],
                ui: {
                    activeTab: state.ui?.activeTab || 'main',
                    theme: document.body.classList.contains('dark-theme') ? 'dark' : 'light'
                },
                project: {
                    name: this.currentProjectName
                }
            }
        };
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
     * @param {Object} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @returns {Object} - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
     */
    createProjectMetadata(state) {
        const blocks = state.blocks || [];
        const roles = state.roles || {};
        const connections = state.connections || [];
        
        // –ü–æ–¥—Å—á–µ—Ç —Å—Å—ã–ª–æ–∫
        const totalReferences = Object.values(roles).reduce(
            (sum, role) => sum + (role.references?.length || 0), 0
        );
        
        return {
            name: this.currentProjectName,
            blocksCount: blocks.length,
            rolesCount: Object.keys(roles).length,
            referencesCount: totalReferences,
            connectionsCount: connections.length,
            createdAt: new Date().toISOString(),
            version: '3.0'
        };
    }

    /**
     * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞
     * @returns {string} - –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
     */
    generateProjectFileName() {
        const projectName = this.currentProjectName
            .replace(/[^a-zA-Z–∞-—è–ê-–Ø0-9\s]/g, '')
            .replace(/\s+/g, '-')
            .toLowerCase();
        
        const timestamp = new Date().toISOString().slice(0, 19).replace(/[:-]/g, '');
        
        return `${projectName}-${timestamp}.json`;
    }

    /**
     * –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –∫–∞–∫ —Ç–µ–∫—Å—Ç
     * @param {File} file - –§–∞–π–ª –¥–ª—è —á—Ç–µ–Ω–∏—è
     * @returns {Promise<string>} - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
     */
    readFileAsText(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            
            reader.onload = (e) => resolve(e.target.result);
            reader.onerror = () => reject(new Error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞'));
            
            reader.readAsText(file);
        });
    }

    /**
     * –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
     * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ {isValid, error}
     */
    validateProjectFile(data) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        if (!data || typeof data !== 'object') {
            return { isValid: false, error: '–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö' };
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!data.version) {
            return { isValid: false, error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏' };
        }
        
        if (!data.data) {
            return { isValid: false, error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è' };
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏
        const supportedVersions = ['1.0', '2.0', '3.0'];
        if (!supportedVersions.includes(data.version)) {
            return { isValid: false, error: `–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–µ—Ä—Å–∏—è: ${data.version}` };
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        const stateData = data.data;
        if (!stateData || typeof stateData !== 'object') {
            return { isValid: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö' };
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if (!Array.isArray(stateData.blocks)) {
            return { isValid: false, error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–∞—Å—Å–∏–≤ –±–ª–æ–∫–æ–≤' };
        }
        
        if (!stateData.roles || typeof stateData.roles !== 'object') {
            return { isValid: false, error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—ä–µ–∫—Ç —Ä–æ–ª–µ–π' };
        }
        
        if (!Array.isArray(stateData.connections)) {
            return { isValid: false, error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–∞—Å—Å–∏–≤ —Å–≤—è–∑–µ–π' };
        }
        
        console.log('‚úÖ Project file validation passed');
        return { isValid: true };
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
     * @param {Object} projectMeta - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
     */
    showLoadConfirmModal(projectMeta) {
        // –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
        const projectName = projectMeta.name || '–ü—Ä–æ–µ–∫—Ç –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
        document.getElementById('loadProjectName').textContent = projectName;
        
        document.getElementById('loadBlocksCount').textContent = projectMeta.blocksCount || 0;
        document.getElementById('loadRolesCount').textContent = projectMeta.rolesCount || 0;
        document.getElementById('loadConnectionsCount').textContent = projectMeta.connectionsCount || 0;
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
        let createdDate = '-';
        if (projectMeta.createdAt) {
            try {
                const date = new Date(projectMeta.createdAt);
                createdDate = date.toLocaleString('ru-RU', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });
            } catch (e) {
                createdDate = projectMeta.createdAt;
            }
        }
        document.getElementById('loadCreatedDate').textContent = createdDate;
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.loadConfirmModal.classList.add('visible');
        
        // –§–æ–∫—É—Å –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        setTimeout(() => {
            document.getElementById('cancelLoadBtn').focus();
        }, 100);
        
        this.events.emit('load-confirm-modal:opened', { projectMeta });
    }

    /**
     * –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ–µ–∫—Ç–∞
     */
    confirmProjectLoad() {
        if (!this.pendingProjectData) return;
        
        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ –æ—á–∏—Å—Ç–∫–∏
        const projectStats = {
            blocks: this.pendingProjectData.blocks?.length || 0,
            roles: Object.keys(this.pendingProjectData.roles || {}).length,
            connections: this.pendingProjectData.connections?.length || 0
        };
        
        try {
            console.log('üîÑ Loading project data into application...');
            
            // –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            if (this.pendingProjectData.project?.name) {
                this.currentProjectName = this.pendingProjectData.project.name;
                document.getElementById('projectName').textContent = this.currentProjectName;
            }
            
            // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MigrationModule –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
            if (window.app && window.app.modules.migration) {
                const migratedData = window.app.modules.migration.autoMigrate(this.pendingProjectData);
                this.state.setState(migratedData);
            } else {
                // Fallback: –ø—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
                this.state.setState(this.pendingProjectData);
            }
            
            // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            this.closeLoadConfirmModal();
            
            // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ –¥–µ—Ä–µ–≤–æ
            this.state.set('ui.activeTab', 'main');
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –≤–∫–ª–∞–¥–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
            this.forceRerenderTabs();
            
            // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            this.events.emit('ui:show-notification', {
                message: '–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω',
                type: 'success',
                duration: 3000
            });
            
            // –≠–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            this.events.emit('project:loaded', projectStats);
            
            console.log('‚úÖ Project loaded successfully');
            
        } catch (error) {
            console.error('‚ùå Project load application failed:', error);
            
            this.events.emit('ui:show-notification', {
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞',
                type: 'error',
                duration: 3000
            });
        } finally {
            // –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            this.pendingProjectData = null;
        }
    }

    /**
     * –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ–µ–∫—Ç–∞
     */
    cancelProjectLoad() {
        this.pendingProjectData = null;
        this.closeLoadConfirmModal();
        
        this.events.emit('project:load-cancelled');
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
     */
    closeLoadConfirmModal() {
        this.loadConfirmModal.classList.remove('visible');
        this.events.emit('load-confirm-modal:closed');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
     */
    setupLoadConfirmModalEvents() {
        // –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        const confirmBtn = document.getElementById('confirmLoadBtn');
        confirmBtn.addEventListener('click', () => this.confirmProjectLoad());

        // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–≥—Ä—É–∑–∫–∏
        const cancelBtn = document.getElementById('cancelLoadBtn');
        cancelBtn.addEventListener('click', () => this.cancelProjectLoad());

        // –ö–ª–∏–∫ –ø–æ overlay –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        this.loadConfirmModal.addEventListener('click', (e) => {
            if (e.target === this.loadConfirmModal) {
                this.cancelProjectLoad();
            }
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    setupStateWatchers() {
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–æ–ª–µ–π
        this.state.watch('roles', () => {
            this.renderTabs();
        });

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
        this.state.watch('ui.activeTab', (newTab, oldTab) => {
            this.updateActiveTab(newTab, oldTab);
        });

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–ª–æ–∫–æ–≤ –∏ —Å—Å—ã–ª–æ–∫ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–æ–≤
        this.state.watch('blocks', () => this.updateTabCounts());

        // –°–ª—É—à–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∞
        this.events.on('project:loaded', () => {
            this.forceRerenderTabs();
        });

        // –°–ª—É—à–∞—Ç—å –ø–æ–ª–Ω—É—é –∑–∞–º–µ–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.events.on('state:replaced', () => {
            this.forceRerenderTabs();
        });
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
     */
    forceRerenderTabs() {
        console.log('üîÑ Force re-rendering tabs after project load');
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        setTimeout(() => {
            this.renderTabs();
            this.updateTabCounts();
            this.updateThemeToggleText();
        }, 50);
    }

    /**
     * –û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
     */
    renderTabs() {
        const tabsNavigation = this.tabsContainer.querySelector('.tabs-navigation');
        const roles = this.state.get('roles');
        
        // –û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Ä–æ–ª–µ–π
        tabsNavigation.querySelectorAll('.tab:not(.main-tree)').forEach(tab => tab.remove());
        
        // –î–æ–±–∞–≤–∏—Ç—å –≤–∫–ª–∞–¥–∫–∏ —Ä–æ–ª–µ–π
        Object.values(roles).forEach(role => {
            const tab = this.createRoleTab(role);
            tabsNavigation.insertBefore(tab, tabsNavigation.querySelector('.add-role-btn'));
        });
        
        // –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        this.updateActiveTab(this.state.get('ui.activeTab'));
        
        // –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏
        this.updateTabCounts();
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –≤–∫–ª–∞–¥–∫—É —Ä–æ–ª–∏
     * @param {Object} role - –û–±—ä–µ–∫—Ç —Ä–æ–ª–∏
     * @returns {HTMLElement} - –≠–ª–µ–º–µ–Ω—Ç –≤–∫–ª–∞–¥–∫–∏
     */
    createRoleTab(role) {
        const tab = document.createElement('div');
        tab.className = 'tab role-tab';
        tab.dataset.tab = role.id;
        
        tab.innerHTML = `
            <span class="tab-icon">${role.icon}</span>
            <span class="tab-title">${role.name}</span>
            <span class="tab-count">0</span>
            <button class="tab-remove" data-role-id="${role.id}" title="–£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å">√ó</button>
        `;
        
        // –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏
        const removeBtn = tab.querySelector('.tab-remove');
        removeBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            this.showDeleteConfirmModal(role.id);
        });
        
        return tab;
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
     * @param {string} activeTabId - ID –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
     */
    updateActiveTab(activeTabId) {
        const tabsNavigation = this.tabsContainer.querySelector('.tabs-navigation');
        
        // –£–±—Ä–∞—Ç—å –∫–ª–∞—Å—Å active —É –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
        tabsNavigation.querySelectorAll('.tab').forEach(tab => {
            tab.classList.remove('active');
        });
        
        // –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Å active –Ω—É–∂–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ
        const activeTab = tabsNavigation.querySelector(`[data-tab="${activeTabId}"]`);
        if (activeTab) {
            activeTab.classList.add('active');
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏ –±–ª–æ–∫–æ–≤ –Ω–∞ –≤–∫–ª–∞–¥–∫–∞—Ö
     */
    updateTabCounts() {
        const blocks = this.state.get('blocks') || [];
        const roles = this.state.get('roles') || {};
        
        // –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞
        const mainTab = this.tabsContainer.querySelector('.tab.main-tree .tab-count');
        if (mainTab) {
            mainTab.textContent = blocks.length;
        }
        
        // –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏ —Ä–æ–ª–µ–π
        Object.values(roles).forEach(role => {
            const roleTab = this.tabsContainer.querySelector(`[data-tab="${role.id}"] .tab-count`);
            if (roleTab) {
                roleTab.textContent = role.references?.length || 0;
            }
        });
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É
     * @param {string} tabId - ID –≤–∫–ª–∞–¥–∫–∏
     */
    switchToTab(tabId) {
        this.state.set('ui.activeTab', tabId);
        this.events.emit('tab:switched', tabId);
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏
     */
    setupRoleModalEvents() {
        // –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å–µ—Ç–∫—É –∏–∫–æ–Ω–æ–∫
        this.populateRoleIcons();
        
        // –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏
        const confirmBtn = document.getElementById('confirmRoleBtn');
        confirmBtn.addEventListener('click', () => this.createRole());

        // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏
        const cancelBtn = document.getElementById('cancelRoleBtn');
        cancelBtn.addEventListener('click', () => this.closeRoleModal());

        // –ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–æ–ª–∏
        const nameInput = document.getElementById('roleNameInput');
        nameInput.addEventListener('input', () => this.validateRoleForm());
        nameInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !confirmBtn.disabled) {
                this.createRole();
            }
        });

        // –ö–ª–∏–∫ –ø–æ overlay –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        this.roleModal.addEventListener('click', (e) => {
            if (e.target === this.roleModal) {
                this.closeRoleModal();
            }
        });
    }

    /**
     * –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å–µ—Ç–∫—É –∏–∫–æ–Ω–æ–∫ –¥–ª—è —Ä–æ–ª–µ–π
     */
    populateRoleIcons() {
        const iconGrid = document.getElementById('roleIconGrid');
        const icons = ['üë§', 'üë•', 'üëë', 'üîß', 'üìä', 'üíº', 'üéØ', 'üöÄ', '‚ö°', 'üî•', 'üíé', 'üé®', 'üì±', 'üíª', 'üåü', 'üé™'];
        
        iconGrid.innerHTML = '';
        
        icons.forEach(icon => {
            const iconBtn = document.createElement('button');
            iconBtn.className = 'role-icon-btn';
            iconBtn.textContent = icon;
            iconBtn.dataset.icon = icon;
            
            iconBtn.addEventListener('click', () => {
                // –£–±—Ä–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ —É –≤—Å–µ—Ö –∏–∫–æ–Ω–æ–∫
                iconGrid.querySelectorAll('.role-icon-btn').forEach(btn => {
                    btn.classList.remove('selected');
                });
                
                // –í—ã–¥–µ–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–∫–æ–Ω–∫—É
                iconBtn.classList.add('selected');
                
                // –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—É
                this.validateRoleForm();
            });
            
            iconGrid.appendChild(iconBtn);
        });
        
        // –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–≤—É—é –∏–∫–æ–Ω–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        iconGrid.querySelector('.role-icon-btn').click();
    }

    /**
     * –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏
     */
    validateRoleForm() {
        const nameInput = document.getElementById('roleNameInput');
        const iconGrid = document.getElementById('roleIconGrid');
        const confirmBtn = document.getElementById('confirmRoleBtn');
        
        const name = nameInput.value.trim();
        const selectedIcon = iconGrid.querySelector('.role-icon-btn.selected');
        
        const isValid = name.length > 0 && selectedIcon && !this.checkRoleNameExists(name);
        
        confirmBtn.disabled = !isValid;
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –µ—Å–ª–∏ –∏–º—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (name.length > 0 && this.checkRoleNameExists(name)) {
            nameInput.style.borderColor = 'var(--color-danger)';
        } else {
            nameInput.style.borderColor = '';
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
     * @param {string} name - –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏
     * @returns {boolean} - true –µ—Å–ª–∏ —Ä–æ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
     */
    checkRoleNameExists(name) {
        const roles = this.state.get('roles') || {};
        return Object.values(roles).some(role => role.name.toLowerCase() === name.toLowerCase());
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ä–æ–ª—å
     */
    createRole() {
        const nameInput = document.getElementById('roleNameInput');
        const iconGrid = document.getElementById('roleIconGrid');
        
        const name = nameInput.value.trim();
        const selectedIconBtn = iconGrid.querySelector('.role-icon-btn.selected');
        const icon = selectedIconBtn?.dataset.icon || 'üë§';
        
        if (!name || this.checkRoleNameExists(name)) {
            return;
        }
        
        // –°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç —Ä–æ–ª–∏
        const roleId = `role_${Date.now()}`;
        const role = {
            id: roleId,
            name,
            icon,
            references: [],
            createdAt: new Date().toISOString()
        };
        
        // –î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.state.set(`roles.${roleId}`, role);
        
        // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.closeRoleModal();
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –Ω–æ–≤—É—é —Ä–æ–ª—å
        this.switchToTab(roleId);
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.events.emit('ui:show-notification', {
            message: `–†–æ–ª—å "${name}" —Å–æ–∑–¥–∞–Ω–∞`,
            type: 'success',
            duration: 3000
        });
        
        // –≠–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ
        this.events.emit('role:created', role);
        
        console.log('‚úÖ Role created:', role);
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏
     */
    openRoleModal() {
        // –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É
        document.getElementById('roleNameInput').value = '';
        document.getElementById('roleNameInput').style.borderColor = '';
        
        // –°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä –∏–∫–æ–Ω–∫–∏
        this.populateRoleIcons();
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.roleModal.classList.add('visible');
        
        // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        setTimeout(() => {
            document.getElementById('roleNameInput').focus();
        }, 100);
        
        this.events.emit('role-modal:opened');
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏
     */
    closeRoleModal() {
        this.roleModal.classList.remove('visible');
        this.events.emit('role-modal:closed');
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏
     * @param {string} roleId - ID —Ä–æ–ª–∏
     */
    showDeleteConfirmModal(roleId) {
        const role = this.state.get(`roles.${roleId}`);
        if (!role) return;
        
        // –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª–∏
        document.getElementById('deleteRoleName').textContent = role.name;
        
        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å ID —Ä–æ–ª–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        this.deleteConfirmModal.dataset.roleId = roleId;
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.deleteConfirmModal.classList.add('visible');
        
        // –§–æ–∫—É—Å –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        setTimeout(() => {
            document.getElementById('cancelDeleteBtn').focus();
        }, 100);
        
        this.events.emit('delete-confirm-modal:opened', { roleId, role });
    }

    /**
     * –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏
     */
    confirmRoleDelete() {
        const roleId = this.deleteConfirmModal.dataset.roleId;
        if (!roleId) return;
        
        const role = this.state.get(`roles.${roleId}`);
        if (!role) return;
        
        // –£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.state.delete(`roles.${roleId}`);
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –µ—Å–ª–∏ —É–¥–∞–ª—è–µ–º–∞—è —Ä–æ–ª—å –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ–π
        const activeTab = this.state.get('ui.activeTab');
        if (activeTab === roleId) {
            this.switchToTab('main');
        }
        
        // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.closeDeleteConfirmModal();
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.events.emit('ui:show-notification', {
            message: `–†–æ–ª—å "${role.name}" —É–¥–∞–ª–µ–Ω–∞`,
            type: 'info',
            duration: 3000
        });
        
        // –≠–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ
        this.events.emit('role:deleted', { roleId, role });
        
        console.log('üóëÔ∏è Role deleted:', role);
    }

    /**
     * –û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏
     */
    cancelRoleDelete() {
        this.closeDeleteConfirmModal();
        this.events.emit('role:delete-cancelled');
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
     */
    closeDeleteConfirmModal() {
        this.deleteConfirmModal.classList.remove('visible');
        delete this.deleteConfirmModal.dataset.roleId;
        this.events.emit('delete-confirm-modal:closed');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
     */
    setupDeleteConfirmModalEvents() {
        // –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
        const confirmBtn = document.getElementById('confirmDeleteBtn');
        confirmBtn.addEventListener('click', () => this.confirmRoleDelete());

        // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
        const cancelBtn = document.getElementById('cancelDeleteBtn');
        cancelBtn.addEventListener('click', () => this.cancelRoleDelete());

        // –ö–ª–∏–∫ –ø–æ overlay –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        this.deleteConfirmModal.addEventListener('click', (e) => {
            if (e.target === this.deleteConfirmModal) {
                this.cancelRoleDelete();
            }
        });
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
     */
    async saveProject() {
        const saveBtn = document.getElementById('saveProjectBtn');
        const originalContent = saveBtn.innerHTML;
        
        try {
            // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
            saveBtn.innerHTML = `
                <span class="item-icon">‚è≥</span>
                <span class="item-text">–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...</span>
            `;
            saveBtn.disabled = true;
            
            // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            const projectData = this.exportData(this.state.getState());
            
            // –°–æ–∑–¥–∞—Ç—å –∏ —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
            const blob = new Blob([JSON.stringify(projectData, null, 2)], { 
                type: 'application/json' 
            });
            
            const url = URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = url;
            link.download = this.generateProjectFileName();
            
            // –î–æ–±–∞–≤–∏—Ç—å link –≤ DOM, –∫–ª–∏–∫–Ω—É—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
            // –û—Å–≤–æ–±–æ–¥–∏—Ç—å URL
            URL.revokeObjectURL(url);
            
            console.log('üíæ Project saved successfully');
            
            // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            this.events.emit('ui:show-notification', {
                message: '–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω',
                type: 'success',
                duration: 3000
            });
            
            this.events.emit('project:saved', projectData.meta);
            
        } catch (error) {
            console.error('‚ùå Project save failed:', error);
            
            this.events.emit('ui:show-notification', {
                message: `–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.message}`,
                type: 'error',
                duration: 4000
            });
        } finally {
            // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É
            setTimeout(() => {
                saveBtn.innerHTML = originalContent;
                saveBtn.disabled = false;
            }, 500);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
     */
    async loadProject() {
        const loadBtn = document.getElementById('loadProjectBtn');
        const originalContent = loadBtn.innerHTML;
        
        try {
            // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
            loadBtn.innerHTML = `
                <span class="item-icon">üìÇ</span>
                <span class="item-text">–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞...</span>
            `;
            loadBtn.disabled = true;
            
            // –°–æ–∑–¥–∞—Ç—å input –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
            const fileInput = document.createElement('input');
            fileInput.type = 'file';
            fileInput.accept = '.json';
            fileInput.style.display = 'none';
            document.body.appendChild(fileInput);
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
            fileInput.addEventListener('change', async (e) => {
                const file = e.target.files[0];
                if (!file) return;
                
                try {
                    loadBtn.innerHTML = `
                        <span class="item-icon">‚è≥</span>
                        <span class="item-text">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                    `;
                    
                    const fileContent = await this.readFileAsText(file);
                    const projectData = JSON.parse(fileContent);
                    
                    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
                    const validation = this.validateProjectFile(projectData);
                    if (!validation.isValid) {
                        throw new Error(validation.error);
                    }
                    
                    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                    this.pendingProjectData = projectData.data;
                    this.showLoadConfirmModal(projectData.meta || {});
                    
                } catch (parseError) {
                    console.error('‚ùå Project parse failed:', parseError);
                    this.events.emit('ui:show-notification', {
                        message: `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${parseError.message}`,
                        type: 'error',
                        duration: 4000
                    });
                } finally {
                    document.body.removeChild(fileInput);
                }
            });
            
            // –û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
            fileInput.click();
            
        } catch (error) {
            console.error('‚ùå Project load failed:', error);
            
            this.events.emit('ui:show-notification', {
                message: `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`,
                type: 'error',
                duration: 4000
            });
        } finally {
            // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É
            setTimeout(() => {
                loadBtn.innerHTML = originalContent;
                loadBtn.disabled = false;
            }, 500);
        }
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã (renderTabs, createRoleTab, setupRoleModalEvents –∏ —Ç.–¥.) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
}