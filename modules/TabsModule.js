/**
 * Tabs Module - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –≤–∫–ª–∞–¥–æ–∫ –∏ —Ä–æ–ª–µ–π
 * v2.0 - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
 * v2.1 - –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
 * v2.2 - –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
 * FIXED: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
 */
export class TabsModule {
    constructor(state, events) {
        this.state = state;
        this.events = events;
        this.tabsContainer = null;
        this.roleModal = null;
        this.deleteConfirmModal = null;
        this.loadConfirmModal = null;
        this.pendingProjectData = null;
        this.themeToggleBtn = null;
        
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
     */
    init() {
        this.createTabsContainer();
        this.createRoleModal();
        this.createDeleteConfirmModal();
        this.createLoadConfirmModal();
        this.setupEventListeners();
        this.setupStateWatchers();
        this.renderTabs();
        
        console.log('üìë Tabs module initialized');
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤–∫–ª–∞–¥–æ–∫
     */
    createTabsContainer() {
        this.tabsContainer = document.createElement('div');
        this.tabsContainer.className = 'tabs-container';
        
        this.tabsContainer.innerHTML = `
            <div class="tabs-header">
                <div class="tab main-tree active" data-tab="main">
                    <span class="tab-icon">üå≥</span>
                    <span>–û—Å–Ω–æ–≤–Ω–æ–µ –¥–µ—Ä–µ–≤–æ</span>
                    <span class="tab-count">0</span>
                </div>
                <button class="add-role-btn" id="addRoleBtn">
                    <span>+</span>
                    <span>–î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å</span>
                </button>
                <div class="project-actions">
                    <button class="project-btn save-project-btn" id="saveProjectBtn" title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç">
                        <span class="btn-icon">üíæ</span>
                        <span class="btn-text">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</span>
                    </button>
                    <button class="project-btn load-project-btn" id="loadProjectBtn" title="–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç">
                        <span class="btn-icon">üìÅ</span>
                        <span class="btn-text">–ó–∞–≥—Ä—É–∑–∏—Ç—å</span>
                    </button>
                    <button class="project-btn theme-toggle-btn" id="themeToggleBtn" title="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É">
                        <span class="btn-icon">üåô</span>
                        <span class="btn-text">–¢–µ–º–∞</span>
                    </button>
                </div>
            </div>
        `;
        
        // –í—Å—Ç–∞–≤–∏—Ç—å –≤ –Ω–∞—á–∞–ª–æ body
        document.body.insertBefore(this.tabsContainer, document.body.firstChild);
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–µ–π
     */
    createRoleModal() {
        this.roleModal = document.createElement('div');
        this.roleModal.className = 'role-modal-overlay';
        this.roleModal.id = 'roleModal';
        
        this.roleModal.innerHTML = `
            <div class="role-modal">
                <div class="role-modal-header">
                    <h2 class="role-modal-title">–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ä–æ–ª—å</h2>
                    <p class="role-modal-subtitle">–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏</p>
                </div>
                <div class="role-modal-body">
                    <div class="role-input-group">
                        <label class="role-input-label" for="roleNameInput">–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏</label>
                        <input type="text" id="roleNameInput" class="role-input" 
                               placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –ö–ª–∏–µ–Ω—Ç, –ü–∞—Ä—Ç–Ω–µ—Ä..." 
                               maxlength="20">
                    </div>
                    <div class="role-suggestions">
                        <div class="role-suggestion" data-role="üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä">üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</div>
                        <div class="role-suggestion" data-role="üë§ –ö–ª–∏–µ–Ω—Ç">üë§ –ö–ª–∏–µ–Ω—Ç</div>
                        <div class="role-suggestion" data-role="ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä">ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä</div>
                        <div class="role-suggestion" data-role="üîß –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞">üîß –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞</div>
                        <div class="role-suggestion" data-role="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫">üìä –ê–Ω–∞–ª–∏—Ç–∏–∫</div>
                    </div>
                </div>
                <div class="role-modal-footer">
                    <button class="role-modal-btn role-modal-btn-secondary" id="cancelRoleBtn">
                        –û—Ç–º–µ–Ω–∞
                    </button>
                    <button class="role-modal-btn role-modal-btn-primary" id="saveRoleBtn" disabled>
                        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–æ–ª—å
                    </button>
                </div>
            </div>
        `;
        
        document.body.appendChild(this.roleModal);
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
     */
    createDeleteConfirmModal() {
        this.deleteConfirmModal = document.createElement('div');
        this.deleteConfirmModal.className = 'delete-confirm-overlay';
        this.deleteConfirmModal.id = 'deleteConfirmModal';
        
        this.deleteConfirmModal.innerHTML = `
            <div class="delete-confirm-modal">
                <div class="delete-confirm-header">
                    <div class="delete-confirm-icon">‚ö†Ô∏è</div>
                    <h2 class="delete-confirm-title">–£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å?</h2>
                </div>
                <div class="delete-confirm-body">
                    <p class="delete-confirm-message">
                        –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å "<strong id="deleteRoleName">–†–æ–ª—å</strong>"?
                    </p>
                    <div class="delete-confirm-details" id="deleteConfirmDetails">
                        <div class="delete-detail">
                            <span class="delete-detail-label">–°—Å—ã–ª–∫–∏ –≤ —Ä–æ–ª–∏:</span>
                            <span class="delete-detail-value" id="deleteReferencesCount">0</span>
                        </div>
                        <div class="delete-detail">
                            <span class="delete-detail-label">–°–æ–∑–¥–∞–Ω–∞:</span>
                            <span class="delete-detail-value" id="deleteCreatedDate">-</span>
                        </div>
                    </div>
                    <div class="delete-confirm-warning">
                        <p>‚ö†Ô∏è <strong>–í–Ω–∏–º–∞–Ω–∏–µ:</strong> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –í—Å–µ —Å—Å—ã–ª–∫–∏ –≤ —Ä–æ–ª–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã, –Ω–æ —Å–∞–º–∏ –±–ª–æ–∫–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –¥–µ—Ä–µ–≤–µ.</p>
                    </div>
                </div>
                <div class="delete-confirm-footer">
                    <button class="delete-confirm-btn delete-confirm-btn-secondary" id="cancelDeleteBtn">
                        –û—Ç–º–µ–Ω–∞
                    </button>
                    <button class="delete-confirm-btn delete-confirm-btn-danger" id="confirmDeleteBtn">
                        –£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å
                    </button>
                </div>
            </div>
        `;
        
        document.body.appendChild(this.deleteConfirmModal);
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
     */
    createLoadConfirmModal() {
        this.loadConfirmModal = document.createElement('div');
        this.loadConfirmModal.className = 'load-confirm-overlay';
        this.loadConfirmModal.id = 'loadConfirmModal';
        
        this.loadConfirmModal.innerHTML = `
            <div class="load-confirm-modal">
                <div class="load-confirm-header">
                    <div class="load-confirm-icon">üìÅ</div>
                    <h2 class="load-confirm-title">–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç?</h2>
                </div>
                <div class="load-confirm-body">
                    <p class="load-confirm-message">
                        –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç "<strong id="loadProjectName">–ü—Ä–æ–µ–∫—Ç</strong>"?
                    </p>
                    <div class="load-confirm-details" id="loadConfirmDetails">
                        <div class="load-detail">
                            <span class="load-detail-label">–ë–ª–æ–∫–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ:</span>
                            <span class="load-detail-value" id="loadBlocksCount">0</span>
                        </div>
                        <div class="load-detail">
                            <span class="load-detail-label">–†–æ–ª–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ:</span>
                            <span class="load-detail-value" id="loadRolesCount">0</span>
                        </div>
                        <div class="load-detail">
                            <span class="load-detail-label">–°–≤—è–∑–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ:</span>
                            <span class="load-detail-value" id="loadConnectionsCount">0</span>
                        </div>
                        <div class="load-detail">
                            <span class="load-detail-label">–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</span>
                            <span class="load-detail-value" id="loadCreatedDate">-</span>
                        </div>
                    </div>
                    <div class="load-confirm-warning">
                        <p>‚ö†Ô∏è <strong>–í–Ω–∏–º–∞–Ω–∏–µ:</strong> –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–º–µ–Ω–∏—Ç –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ (–±–ª–æ–∫–∏, —Ä–æ–ª–∏, —Å–≤—è–∑–∏). –¢–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω.</p>
                    </div>
                </div>
                <div class="load-confirm-footer">
                    <button class="load-confirm-btn load-confirm-btn-secondary" id="cancelLoadBtn">
                        –û—Ç–º–µ–Ω–∞
                    </button>
                    <button class="load-confirm-btn load-confirm-btn-primary" id="confirmLoadBtn">
                        –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
                    </button>
                </div>
            </div>
        `;
        
        document.body.appendChild(this.loadConfirmModal);
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏
        const addRoleBtn = document.getElementById('addRoleBtn');
        addRoleBtn.addEventListener('click', () => this.openRoleModal());

        // –ö–Ω–æ–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
        const saveProjectBtn = document.getElementById('saveProjectBtn');
        const loadProjectBtn = document.getElementById('loadProjectBtn');
        
        saveProjectBtn.addEventListener('click', () => this.saveProject());
        loadProjectBtn.addEventListener('click', () => this.loadProject());

        // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
        this.themeToggleBtn = document.getElementById('themeToggleBtn');
        this.themeToggleBtn.addEventListener('click', () => this.toggleTheme());

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É —Ç–µ–º—ã
        this.updateThemeButton();

        // –°–æ–±—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏
        this.setupRoleModalEvents();
        
        // –°–æ–±—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
        this.setupDeleteConfirmModalEvents();
        
        // –°–æ–±—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        this.setupLoadConfirmModalEvents();
        
        // –ö–ª–∏–∫–∏ –ø–æ –≤–∫–ª–∞–¥–∫–∞–º (–¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)
        this.tabsContainer.addEventListener('click', (e) => {
            const tab = e.target.closest('.tab');
            if (tab && !e.target.classList.contains('tab-remove')) {
                this.switchToTab(tab.dataset.tab);
            }
        });

        // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        document.addEventListener('keydown', (e) => {
            this.handleKeydown(e);
        });

        // –°–æ–±—ã—Ç–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
        this.events.on('block:created', () => this.updateTabCounts());
        this.events.on('block:deleted', () => this.updateTabCounts());
        this.events.on('reference:created', () => this.updateTabCounts());
        this.events.on('reference:deleted', () => this.updateTabCounts());

        // –°–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
        this.events.on('theme:changed', () => this.updateThemeButton());
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É
     */
    toggleTheme() {
        // –ü–æ–ª—É—á–∏—Ç—å UI –º–æ–¥—É–ª—å —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if (window.app && window.app.modules && window.app.modules.ui) {
            window.app.modules.ui.themeManager.toggleTheme();
            
            // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            const currentTheme = window.app.modules.ui.themeManager.getCurrentTheme();
            const themeName = currentTheme === 'dark' ? '—Ç–µ–º–Ω—É—é' : '—Å–≤–µ—Ç–ª—É—é';
            
            this.events.emit('ui:show-notification', {
                message: `–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ ${themeName} —Ç–µ–º—É`,
                type: 'info',
                duration: 2000
            });
        } else {
            console.warn('UI module not available for theme toggle');
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —Ç–µ–º—ã
     */
    updateThemeButton() {
        if (!this.themeToggleBtn) return;

        // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ç–µ–º—É
        let currentTheme = 'dark'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (window.app && window.app.modules && window.app.modules.ui) {
            currentTheme = window.app.modules.ui.themeManager.getCurrentTheme();
        }

        // –û–±–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É –∏ –ø–æ–¥—Å–∫–∞–∑–∫—É
        const iconElement = this.themeToggleBtn.querySelector('.btn-icon');
        const textElement = this.themeToggleBtn.querySelector('.btn-text');
        
        if (iconElement) {
            iconElement.textContent = currentTheme === 'dark' ? '‚òÄÔ∏è' : 'üåô';
        }
        
        if (textElement) {
            textElement.textContent = currentTheme === 'dark' ? '–°–≤–µ—Ç–ª–∞—è' : '–¢–µ–º–Ω–∞—è';
        }
        
        this.themeToggleBtn.title = `–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ ${currentTheme === 'dark' ? '—Å–≤–µ—Ç–ª—É—é' : '—Ç–µ–º–Ω—É—é'} —Ç–µ–º—É`;
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
     * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω—ã —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∞
     */
    setupStateWatchers() {
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–æ–ª–µ–π
        this.state.watch('roles', () => {
            this.renderTabs();
        });

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
        this.state.watch('ui.activeTab', (newTab, oldTab) => {
            this.updateActiveTab(newTab, oldTab);
        });

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–ª–æ–∫–æ–≤ –∏ —Å—Å—ã–ª–æ–∫ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–æ–≤
        this.state.watch('blocks', () => this.updateTabCounts());

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–ª—É—à–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∞
        this.events.on('project:loaded', () => {
            this.forceRerenderTabs();
        });

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–ª—É—à–∞—Ç—å –ø–æ–ª–Ω—É—é –∑–∞–º–µ–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.events.on('state:replaced', () => {
            this.forceRerenderTabs();
        });
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –ø–æ–ª–Ω–æ–π –∑–∞–º–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    forceRerenderTabs() {
        console.log('üîÑ Force re-rendering tabs after project load');
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        setTimeout(() => {
            this.renderTabs();
            this.updateTabCounts();
            this.updateThemeButton(); // –û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —Ç–µ–º—ã —Ç–æ–∂–µ
        }, 50);
    }

    /**
     * –û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
     */
    renderTabs() {
        const tabsHeader = this.tabsContainer.querySelector('.tabs-header');
        const roles = this.state.get('roles');
        
        // –û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Ä–æ–ª–µ–π
        tabsHeader.querySelectorAll('.tab:not(.main-tree)').forEach(tab => tab.remove());
        
        // –î–æ–±–∞–≤–∏—Ç—å –≤–∫–ª–∞–¥–∫–∏ —Ä–æ–ª–µ–π
        Object.values(roles).forEach(role => {
            const tab = this.createRoleTab(role);
            tabsHeader.insertBefore(tab, tabsHeader.querySelector('.add-role-btn'));
        });
        
        // –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        this.updateActiveTab(this.state.get('ui.activeTab'));
        
        // –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏
        this.updateTabCounts();
        
        // –û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —Ç–µ–º—ã
        this.updateThemeButton();
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –≤–∫–ª–∞–¥–∫—É —Ä–æ–ª–∏
     * @param {Object} role - –û–±—ä–µ–∫—Ç —Ä–æ–ª–∏
     * @returns {HTMLElement} - –≠–ª–µ–º–µ–Ω—Ç –≤–∫–ª–∞–¥–∫–∏
     */
    createRoleTab(role) {
        const tab = document.createElement('div');
        tab.className = 'tab role-tab';
        tab.dataset.tab = role.id;
        
        tab.innerHTML = `
            <span class="tab-icon">${role.icon}</span>
            <span class="tab-name">${role.name}</span>
            <span class="tab-count">0</span>
            <button class="tab-remove" data-role-id="${role.id}" title="–£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å">‚úï</button>
        `;
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏
        const removeBtn = tab.querySelector('.tab-remove');
        removeBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            this.confirmDeleteRole(role.id);
        });
        
        return tab;
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É
     * @param {string} tabId - ID –≤–∫–ª–∞–¥–∫–∏
     */
    switchToTab(tabId) {
        this.state.set('ui.activeTab', tabId);
        
        this.events.emit('tab:switched', {
            tabId,
            isMainTree: tabId === 'main'
        });
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
     * @param {string} newTab - –ù–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞
     * @param {string} oldTab - –ü—Ä–µ–¥—ã–¥—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞
     */
    updateActiveTab(newTab, oldTab) {
        // –û–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞—Å—Å—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        document.querySelectorAll('.tab').forEach(tab => {
            tab.classList.remove('active');
        });
        
        const activeTab = document.querySelector(`[data-tab="${newTab}"]`);
        if (activeTab) {
            activeTab.classList.add('active');
        }

        // –£–≤–µ–¥–æ–º–∏—Ç—å –æ —Å–º–µ–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        const isMainTree = newTab === 'main';
        this.events.emit('tab:context-changed', {
            tabId: newTab,
            isMainTree,
            canCreateBlocks: isMainTree,
            canCreateReferences: !isMainTree
        });
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–æ –≤–∫–ª–∞–¥–∫–∞—Ö
     */
    updateTabCounts() {
        // –°—á–µ—Ç—á–∏–∫ –±–ª–æ–∫–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –¥–µ—Ä–µ–≤–µ
        const blocksCount = this.state.get('blocks').length;
        const mainTreeTab = document.querySelector('[data-tab="main"] .tab-count');
        if (mainTreeTab) {
            mainTreeTab.textContent = blocksCount;
        }

        // –°—á–µ—Ç—á–∏–∫–∏ —Å—Å—ã–ª–æ–∫ –≤ —Ä–æ–ª—è—Ö
        const roles = this.state.get('roles');
        Object.values(roles).forEach(role => {
            const referencesCount = role.references?.length || 0;
            const roleTab = document.querySelector(`[data-tab="${role.id}"] .tab-count`);
            if (roleTab) {
                roleTab.textContent = referencesCount;
            }
        });
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏
     */
    openRoleModal() {
        this.roleModal.classList.add('visible');
        
        // –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É
        const roleNameInput = document.getElementById('roleNameInput');
        const saveRoleBtn = document.getElementById('saveRoleBtn');
        
        roleNameInput.value = '';
        saveRoleBtn.disabled = true;
        
        // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        setTimeout(() => {
            roleNameInput.focus();
        }, 100);

        this.events.emit('role-modal:opened');
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏
     */
    closeRoleModal() {
        this.roleModal.classList.remove('visible');
        this.events.emit('role-modal:closed');
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ä–æ–ª—å
     * @param {string} roleName - –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏
     */
    createRole(roleName) {
        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏
        const roles = this.state.get('roles');
        const nameExists = Object.values(roles).some(role => 
            role.name.toLowerCase() === roleName.toLowerCase()
        );
        
        if (nameExists) {
            alert('–†–æ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            return;
        }

        // –°–æ–∑–¥–∞—Ç—å —Ä–æ–ª—å
        const role = this.state.createRole({
            name: roleName,
            icon: 'üë§'
        });

        // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –Ω–æ–≤—É—é —Ä–æ–ª—å
        this.switchToTab(role.id);
        
        // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.closeRoleModal();

        this.events.emit('role:created-via-ui', { roleId: role.id, role });
    }

    /**
     * –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏
     * @param {string} roleId - ID —Ä–æ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
     */
    confirmDeleteRole(roleId) {
        const role = this.state.get(`roles.${roleId}`);
        if (!role) return;

        // –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
        document.getElementById('deleteRoleName').textContent = role.name;
        document.getElementById('deleteReferencesCount').textContent = role.references?.length || 0;
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
        let createdDate = '-';
        if (role.createdAt) {
            try {
                const date = new Date(role.createdAt);
                createdDate = date.toLocaleDateString('ru-RU');
            } catch (e) {
                createdDate = role.createdAt;
            }
        }
        document.getElementById('deleteCreatedDate').textContent = createdDate;
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.deleteConfirmModal.classList.add('visible');
        
        // –ó–∞–ø–æ–º–Ω–∏—Ç—å ID —Ä–æ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        this.deleteConfirmModal.dataset.roleId = roleId;
        
        // –§–æ–∫—É—Å –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        setTimeout(() => {
            document.getElementById('cancelDeleteBtn').focus();
        }, 100);
        
        this.events.emit('delete-confirm-modal:opened', { roleId, role });
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å
     */
    deleteRole() {
        const roleId = this.deleteConfirmModal.dataset.roleId;
        if (!roleId) return;

        const role = this.state.get(`roles.${roleId}`);
        const referencesCount = role?.references?.length || 0;

        // –£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å
        this.state.deleteRole(roleId);
        
        // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.closeDeleteConfirmModal();
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ –¥–µ—Ä–µ–≤–æ
        this.state.set('ui.activeTab', 'main');
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.events.emit('ui:show-notification', {
            message: `–†–æ–ª—å "${role.name}" —É–¥–∞–ª–µ–Ω–∞ (${referencesCount} —Å—Å—ã–ª–æ–∫)`,
            type: 'success',
            duration: 3000
        });

        this.events.emit('role:deleted-via-ui', { roleId, role, referencesCount });
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
     */
    closeDeleteConfirmModal() {
        this.deleteConfirmModal.classList.remove('visible');
        delete this.deleteConfirmModal.dataset.roleId;
        this.events.emit('delete-confirm-modal:closed');
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
     */
    async saveProject() {
        const saveBtn = document.getElementById('saveProjectBtn');
        const originalContent = saveBtn.innerHTML;
        
        try {
            // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
            saveBtn.innerHTML = `
                <span class="btn-icon">‚è≥</span>
                <span class="btn-text">–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...</span>
            `;
            saveBtn.disabled = true;
            
            // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const currentState = this.state.getState();
            
            // –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            const projectData = {
                version: "2.0",
                data: currentState,
                meta: {
                    name: this.generateProjectName(currentState),
                    createdAt: Date.now(),
                    blocksCount: currentState.blocks?.length || 0,
                    rolesCount: Object.keys(currentState.roles || {}).length,
                    connectionsCount: currentState.connections?.length || 0,
                    theme: currentState.ui?.theme || 'dark',
                    appVersion: "2.0"
                }
            };
            
            // –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            const blob = new Blob([JSON.stringify(projectData, null, 2)], {
                type: 'application/json'
            });
            
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = this.generateProjectFileName();
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            this.events.emit('ui:show-notification', {
                message: '–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω',
                type: 'success',
                duration: 3000
            });
            
            this.events.emit('project:saved', projectData.meta);
            
        } catch (error) {
            console.error('‚ùå Project save failed:', error);
            
            this.events.emit('ui:show-notification', {
                message: `–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.message}`,
                type: 'error',
                duration: 4000
            });
        } finally {
            // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É
            setTimeout(() => {
                saveBtn.innerHTML = originalContent;
                saveBtn.disabled = false;
            }, 500);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
     */
    async loadProject() {
        const loadBtn = document.getElementById('loadProjectBtn');
        const originalContent = loadBtn.innerHTML;
        
        try {
            // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
            loadBtn.innerHTML = `
                <span class="btn-icon">üìÇ</span>
                <span class="btn-text">–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞...</span>
            `;
            loadBtn.disabled = true;
            
            // –°–æ–∑–¥–∞—Ç—å input –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
            const fileInput = document.createElement('input');
            fileInput.type = 'file';
            fileInput.accept = '.json';
            fileInput.style.display = 'none';
            document.body.appendChild(fileInput);
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
            fileInput.addEventListener('change', async (e) => {
                const file = e.target.files[0];
                if (!file) return;
                
                try {
                    loadBtn.innerHTML = `
                        <span class="btn-icon">‚è≥</span>
                        <span class="btn-text">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                    `;
                    
                    const fileContent = await this.readFileAsText(file);
                    const projectData = JSON.parse(fileContent);
                    
                    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
                    const validation = this.validateProjectFile(projectData);
                    if (!validation.isValid) {
                        throw new Error(validation.error);
                    }
                    
                    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                    this.pendingProjectData = projectData.data;
                    this.showLoadConfirmModal(projectData.meta || {});
                    
                } catch (parseError) {
                    console.error('‚ùå Project parse failed:', parseError);
                    this.events.emit('ui:show-notification', {
                        message: `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${parseError.message}`,
                        type: 'error',
                        duration: 4000
                    });
                } finally {
                    document.body.removeChild(fileInput);
                }
            });
            
            // –û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
            fileInput.click();
            
        } catch (error) {
            console.error('‚ùå Project load failed:', error);
            
            this.events.emit('ui:show-notification', {
                message: `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`,
                type: 'error',
                duration: 4000
            });
        } finally {
            // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É
            setTimeout(() => {
                loadBtn.innerHTML = originalContent;
                loadBtn.disabled = false;
            }, 500);
        }
    }

    /**
     * –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –∫–∞–∫ —Ç–µ–∫—Å—Ç
     * @param {File} file - –§–∞–π–ª –¥–ª—è —á—Ç–µ–Ω–∏—è
     * @returns {Promise<string>} - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
     */
    readFileAsText(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            
            reader.onload = (e) => resolve(e.target.result);
            reader.onerror = () => reject(new Error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞'));
            
            reader.readAsText(file);
        });
    }

    /**
     * –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
     * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ {isValid, error}
     */
    validateProjectFile(data) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        if (!data || typeof data !== 'object') {
            return { isValid: false, error: '–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö' };
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!data.version) {
            return { isValid: false, error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏' };
        }
        
        if (!data.data) {
            return { isValid: false, error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è' };
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏
        const supportedVersions = ['1.0', '2.0'];
        if (!supportedVersions.includes(data.version)) {
            return { isValid: false, error: `–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–µ—Ä—Å–∏—è: ${data.version}` };
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        const stateData = data.data;
        if (!stateData || typeof stateData !== 'object') {
            return { isValid: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö' };
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if (!Array.isArray(stateData.blocks)) {
            return { isValid: false, error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–∞—Å—Å–∏–≤ –±–ª–æ–∫–æ–≤' };
        }
        
        if (!stateData.roles || typeof stateData.roles !== 'object') {
            return { isValid: false, error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—ä–µ–∫—Ç —Ä–æ–ª–µ–π' };
        }
        
        if (!Array.isArray(stateData.connections)) {
            return { isValid: false, error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–∞—Å—Å–∏–≤ —Å–≤—è–∑–µ–π' };
        }
        
        console.log('‚úÖ Project file validation passed');
        return { isValid: true };
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
     * @param {Object} projectMeta - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
     */
    showLoadConfirmModal(projectMeta) {
        // –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
        const projectName = projectMeta.name || '–ü—Ä–æ–µ–∫—Ç –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
        document.getElementById('loadProjectName').textContent = projectName;
        
        document.getElementById('loadBlocksCount').textContent = projectMeta.blocksCount || 0;
        document.getElementById('loadRolesCount').textContent = projectMeta.rolesCount || 0;
        document.getElementById('loadConnectionsCount').textContent = projectMeta.connectionsCount || 0;
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
        let createdDate = '-';
        if (projectMeta.createdAt) {
            try {
                const date = new Date(projectMeta.createdAt);
                createdDate = date.toLocaleString('ru-RU', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });
            } catch (e) {
                createdDate = projectMeta.createdAt;
            }
        }
        document.getElementById('loadCreatedDate').textContent = createdDate;
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.loadConfirmModal.classList.add('visible');
        
        // –§–æ–∫—É—Å –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        setTimeout(() => {
            document.getElementById('cancelLoadBtn').focus();
        }, 100);
        
        this.events.emit('load-confirm-modal:opened', { projectMeta });
    }

    /**
     * –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ–µ–∫—Ç–∞
     * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä
     */
    confirmProjectLoad() {
        if (!this.pendingProjectData) return;
        
        // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ –æ—á–∏—Å—Ç–∫–∏
        const projectStats = {
            blocks: this.pendingProjectData.blocks?.length || 0,
            roles: Object.keys(this.pendingProjectData.roles || {}).length,
            connections: this.pendingProjectData.connections?.length || 0
        };
        
        try {
            console.log('üîÑ Loading project data into application...');
            
            // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MigrationModule –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
            if (window.app && window.app.modules.migration) {
                const migratedData = window.app.modules.migration.autoMigrate(this.pendingProjectData);
                this.state.setState(migratedData);
            } else {
                // Fallback: –ø—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
                this.state.setState(this.pendingProjectData);
            }
            
            // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            this.closeLoadConfirmModal();
            
            // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ –¥–µ—Ä–µ–≤–æ
            this.state.set('ui.activeTab', 'main');
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –≤–∫–ª–∞–¥–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
            this.forceRerenderTabs();
            
            // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            this.events.emit('ui:show-notification', {
                message: '–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω',
                type: 'success',
                duration: 3000
            });
            
            // –≠–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
            this.events.emit('project:loaded', projectStats);
            
            console.log('‚úÖ Project loaded successfully');
            
        } catch (error) {
            console.error('‚ùå Project load application failed:', error);
            
            this.events.emit('ui:show-notification', {
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞',
                type: 'error',
                duration: 3000
            });
        } finally {
            // –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            this.pendingProjectData = null;
        }
    }

    /**
     * –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ–µ–∫—Ç–∞
     */
    cancelProjectLoad() {
        this.pendingProjectData = null;
        this.closeLoadConfirmModal();
        
        this.events.emit('project:load-cancelled');
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
     */
    closeLoadConfirmModal() {
        this.loadConfirmModal.classList.remove('visible');
        this.events.emit('load-confirm-modal:closed');
    }

    /**
     * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
     * @param {Object} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @returns {string} - –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
     */
    generateProjectName(state) {
        const blocks = state.blocks || [];
        
        if (blocks.length === 0) {
            return '–ü—É—Å—Ç–æ–π –ø—Ä–æ–µ–∫—Ç';
        }
        
        // –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–π—Ç–∏ –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ä–µ–¥–∏ –ø–µ—Ä–≤—ã—Ö –±–ª–æ–∫–æ–≤
        for (const block of blocks.slice(0, 3)) {
            if (block.title && block.title.length > 3 && block.title.length < 30) {
                return block.title.replace(/[^\w\s-]/g, '');
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        return `–ü—Ä–æ–µ–∫—Ç (${blocks.length} –±–ª–æ–∫–æ–≤)`;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞
     * @returns {string} - –ò–º—è —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ notes-project-YYYY-MM-DD-HHmm.json
     */
    generateProjectFileName() {
        const now = new Date();
        
        const year = now.getFullYear();
        const month = String(now.getMonth() + 1).padStart(2, '0');
        const day = String(now.getDate()).padStart(2, '0');
        const hours = String(now.getHours()).padStart(2, '0');
        const minutes = String(now.getMinutes()).padStart(2, '0');
        
        return `notes-project-${year}-${month}-${day}-${hours}${minutes}.json`;
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏
     */
    setupRoleModalEvents() {
        const roleNameInput = document.getElementById('roleNameInput');
        const cancelRoleBtn = document.getElementById('cancelRoleBtn');
        const saveRoleBtn = document.getElementById('saveRoleBtn');

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
        roleNameInput.addEventListener('input', (e) => {
            const value = e.target.value.trim();
            saveRoleBtn.disabled = value.length === 0;
        });

        // Enter –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        roleNameInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !saveRoleBtn.disabled) {
                this.createRole(roleNameInput.value.trim());
            }
        });

        // –ö–Ω–æ–ø–∫–∏
        cancelRoleBtn.addEventListener('click', () => this.closeRoleModal());
        saveRoleBtn.addEventListener('click', () => {
            const roleName = roleNameInput.value.trim();
            if (roleName) {
                this.createRole(roleName);
            }
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –æ–≤–µ—Ä–ª–µ—é
        this.roleModal.addEventListener('click', (e) => {
            if (e.target === this.roleModal) {
                this.closeRoleModal();
            }
        });

        // –ü–æ–¥—Å–∫–∞–∑–∫–∏
        document.querySelectorAll('.role-suggestion').forEach(suggestion => {
            suggestion.addEventListener('click', () => {
                const roleText = suggestion.dataset.role;
                const roleName = roleText.substring(2).trim(); // –£–±—Ä–∞—Ç—å —ç–º–æ–¥–∑–∏
                roleNameInput.value = roleName;
                saveRoleBtn.disabled = false;
                roleNameInput.focus();
            });
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
     */
    setupDeleteConfirmModalEvents() {
        const cancelDeleteBtn = document.getElementById('cancelDeleteBtn');
        const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');

        // –ö–Ω–æ–ø–∫–∏
        cancelDeleteBtn.addEventListener('click', () => this.closeDeleteConfirmModal());
        confirmDeleteBtn.addEventListener('click', () => this.deleteRole());

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –æ–≤–µ—Ä–ª–µ—é
        this.deleteConfirmModal.addEventListener('click', (e) => {
            if (e.target === this.deleteConfirmModal) {
                this.closeDeleteConfirmModal();
            }
        });

        // Escape –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.deleteConfirmModal.classList.contains('visible')) {
                this.closeDeleteConfirmModal();
            }
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
     */
    setupLoadConfirmModalEvents() {
        const cancelLoadBtn = document.getElementById('cancelLoadBtn');
        const confirmLoadBtn = document.getElementById('confirmLoadBtn');

        // –ö–Ω–æ–ø–∫–∏
        cancelLoadBtn.addEventListener('click', () => this.cancelProjectLoad());
        confirmLoadBtn.addEventListener('click', () => this.confirmProjectLoad());

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –æ–≤–µ—Ä–ª–µ—é
        this.loadConfirmModal.addEventListener('click', (e) => {
            if (e.target === this.loadConfirmModal) {
                this.cancelProjectLoad();
            }
        });

        // Escape –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.loadConfirmModal.classList.contains('visible')) {
                this.cancelProjectLoad();
            }
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
     * @param {KeyboardEvent} e - –°–æ–±—ã—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
     */
    handleKeydown(e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—Å–ª–∏ —Ñ–æ–∫—É—Å –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') {
            return;
        }

        // Ctrl + T - —Å–æ–∑–¥–∞—Ç—å —Ä–æ–ª—å
        if (e.ctrlKey && e.key === 't') {
            e.preventDefault();
            this.openRoleModal();
            return;
        }

        // Ctrl + Shift + T - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É
        if (e.ctrlKey && e.shiftKey && e.key === 'T') {
            e.preventDefault();
            this.toggleTheme();
            return;
        }

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        if (e.ctrlKey && e.key >= '1' && e.key <= '9') {
            e.preventDefault();
            
            const index = parseInt(e.key) - 1;
            const roles = this.state.get('roles');
            const roleIds = Object.keys(roles);
            
            if (index === 0) {
                // Ctrl+1 - –æ—Å–Ω–æ–≤–Ω–æ–µ –¥–µ—Ä–µ–≤–æ
                this.switchToTab('main');
            } else if (index <= roleIds.length) {
                // Ctrl+2,3,4... - —Ä–æ–ª–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
                this.switchToTab(roleIds[index - 1]);
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ ID —Ä–æ–ª–µ–π (–¥–ª—è –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à)
     * @returns {Array} - –ú–∞—Å—Å–∏–≤ ID —Ä–æ–ª–µ–π
     */
    getRoleIds() {
        const roles = this.state.get('roles');
        return Object.keys(roles);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–µ
     * @returns {Object} - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∫–ª–∞–¥–∫–µ
     */
    getCurrentTabInfo() {
        const activeTab = this.state.get('ui.activeTab');
        
        if (activeTab === 'main') {
            return {
                id: 'main',
                name: '–û—Å–Ω–æ–≤–Ω–æ–µ –¥–µ—Ä–µ–≤–æ',
                type: 'main',
                isMainTree: true,
                canCreateBlocks: true,
                canCreateReferences: false,
                itemsCount: this.state.get('blocks').length
            };
        } else {
            const role = this.state.get(`roles.${activeTab}`);
            return {
                id: activeTab,
                name: role?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å',
                type: 'role',
                isMainTree: false,
                canCreateBlocks: false,
                canCreateReferences: true,
                itemsCount: role?.references?.length || 0,
                role: role
            };
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥—É–ª—è
     * @returns {Object} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
     */
    getStats() {
        const roles = this.state.get('roles');
        const totalRoles = Object.keys(roles).length;
        const totalReferences = Object.values(roles).reduce(
            (sum, role) => sum + (role.references?.length || 0), 0
        );

        return {
            totalTabs: totalRoles + 1, // +1 –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞
            totalRoles,
            totalReferences,
            activeTab: this.state.get('ui.activeTab'),
            allRolesDeletable: true,
            projectActionsAvailable: true,
            projectSaveImplemented: true,
            projectLoadImplemented: true,
            themeToggleImplemented: true // –î–û–ë–ê–í–õ–ï–ù–û
        };
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–æ–¥—É–ª—è
     */
    destroy() {
        if (this.tabsContainer) {
            this.tabsContainer.remove();
        }
        if (this.roleModal) {
            this.roleModal.remove();
        }
        if (this.deleteConfirmModal) {
            this.deleteConfirmModal.remove();
        }
        if (this.loadConfirmModal) {
            this.loadConfirmModal.remove();
        }
        
        console.log('üóëÔ∏è Tabs module destroyed');
    }
}