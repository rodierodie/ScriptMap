/**
 * State Manager v2.0 - –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö —Å –±–ª–æ–∫–∞–º–∏ –∏ —Ä–æ–ª—è–º–∏
 */
export class StateManager {
    constructor(events) {
        this.events = events;
        this.state = this.getInitialState();
        this.history = [];
        this.maxHistorySize = 50;
        this.debugMode = false;
        this.version = "2.0";
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è v2.0
     * @returns {Object} - –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     */
    getInitialState() {
        return {
            version: "2.0",
            
            // –û—Å–Ω–æ–≤–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –±–ª–æ–∫–æ–≤
            blocks: [],
            
            // –†–æ–ª–∏ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –±–ª–æ–∫–∏
            roles: {
                manager: {
                    id: 'manager',
                    name: '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å',
                    icon: 'üëî',
                    isDefault: true,
                    references: [],
                    createdAt: Date.now()
                },
                employee: {
                    id: 'employee', 
                    name: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫',
                    icon: 'üë§',
                    isDefault: true,
                    references: [],
                    createdAt: Date.now()
                },
                intern: {
                    id: 'intern',
                    name: '–°—Ç–∞–∂–µ—Ä', 
                    icon: 'üéì',
                    isDefault: true,
                    references: [],
                    createdAt: Date.now()
                }
            },
            
            // –°–≤—è–∑–∏ –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏ (–Ω–µ —Å—Å—ã–ª–∫–∞–º–∏!)
            connections: [],
            
            // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ö–æ–ª—Å—Ç–∞ (–æ–±—â–µ–µ –¥–ª—è –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫)
            canvas: {
                transform: { x: 0, y: 0 },
                isDragging: false,
                isPanning: false,
                zoom: 1
            },
            
            // –°–æ—Å—Ç–æ—è–Ω–∏–µ UI
            ui: {
                activeTab: 'main',           // main | roleId
                instructionsVisible: false,
                theme: 'light',
                paletteOpen: false
            },
            
            // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
            interaction: {
                isSpacePressed: false,
                dragItem: null,              // { type: 'block'|'reference', id: string, roleId?: string }
                dragOffset: { x: 0, y: 0 },
                panStart: { x: 0, y: 0 }
            },
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            settings: {
                autoSave: true,
                debugMode: false,
                version: "2.0"
            }
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –ø—É—Ç–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–∫–ª–∞–¥–æ–∫
     * @param {string} path - –ü—É—Ç—å –∫ –∑–Ω–∞—á–µ–Ω–∏—é
     * @returns {*} - –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ –ø—É—Ç–∏
     */
    get(path) {
        if (!path) return this.state;
        
        try {
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –ø—É—Ç–µ–π
            if (path.startsWith('current.')) {
                return this.getCurrentTabData(path.substring(8));
            }
            
            return path.split('.').reduce((obj, key) => {
                if (obj === null || obj === undefined) return undefined;
                return obj[key];
            }, this.state);
        } catch (error) {
            console.error(`‚ùå Error getting state path "${path}":`, error);
            return undefined;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
     * @param {string} subPath - –ü–æ–¥–ø—É—Ç—å –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
     * @returns {*} - –î–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
     */
    getCurrentTabData(subPath = '') {
        const activeTab = this.get('ui.activeTab');
        
        if (activeTab === 'main') {
            // –í –æ—Å–Ω–æ–≤–Ω–æ–º –¥–µ—Ä–µ–≤–µ —Ä–∞–±–æ—Ç–∞–µ–º —Å –±–ª–æ–∫–∞–º–∏
            if (subPath === 'items' || subPath === '') {
                return this.get('blocks');
            }
            return this.get(`blocks.${subPath}`);
        } else {
            // –í —Ä–æ–ª—è—Ö —Ä–∞–±–æ—Ç–∞–µ–º —Å–æ —Å—Å—ã–ª–∫–∞–º–∏
            const role = this.get(`roles.${activeTab}`);
            if (!role) return undefined;
            
            if (subPath === 'items' || subPath === '') {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –±–ª–æ–∫–æ–≤
                return this.resolveReferences(role.references);
            }
            return role[subPath];
        }
    }

    /**
     * –†–∞–∑—Ä–µ—à–∏—Ç—å —Å—Å—ã–ª–∫–∏ - –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫–æ–≤ –¥–ª—è —Å—Å—ã–ª–æ–∫
     * @param {Array} references - –ú–∞—Å—Å–∏–≤ —Å—Å—ã–ª–æ–∫
     * @returns {Array} - –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –±–ª–æ–∫–æ–≤ –∏ –ø–æ–∑–∏—Ü–∏—è–º–∏ —Å—Å—ã–ª–æ–∫
     */
    resolveReferences(references) {
        const blocks = this.get('blocks');
        
        return references.map(ref => {
            const block = blocks.find(b => b.id === ref.blockId);
            if (!block) {
                console.warn(`‚ö†Ô∏è Reference to missing block: ${ref.blockId}`);
                return null;
            }
            
            return {
                ...block,
                // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
                _reference: {
                    id: ref.id,
                    position: ref.position,
                    createdAt: ref.createdAt,
                    isReference: true
                },
                // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ–∑–∏—Ü–∏–µ–π —Å—Å—ã–ª–∫–∏
                position: ref.position
            };
        }).filter(Boolean);
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–∫–ª–∞–¥–æ–∫
     * @param {string} path - –ü—É—Ç—å –∫ –∑–Ω–∞—á–µ–Ω–∏—é
     * @param {*} value - –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
     * @returns {StateManager} - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç this –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤
     */
    set(path, value) {
        const oldValue = this.get(path);
        
        // –°–æ–∑–¥–∞—Ç—å —Å–Ω–∏–º–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        this.saveToHistory();
        
        try {
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –ø—É—Ç–µ–π
            if (path.startsWith('current.')) {
                this.setCurrentTabData(path.substring(8), value);
            } else {
                this.setDirectPath(path, value);
            }
            
            if (this.debugMode) {
                console.log(`üìù State updated: ${path}`, { oldValue, newValue: value });
            }
            
            // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            this.events.emit('state:change', { 
                path, 
                value, 
                oldValue,
                timestamp: Date.now()
            });
            
        } catch (error) {
            console.error(`‚ùå Error setting state path "${path}":`, error);
        }
        
        return this;
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
     * @param {string} subPath - –ü–æ–¥–ø—É—Ç—å –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
     * @param {*} value - –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
     */
    setCurrentTabData(subPath, value) {
        const activeTab = this.get('ui.activeTab');
        
        if (activeTab === 'main') {
            // –í –æ—Å–Ω–æ–≤–Ω–æ–º –¥–µ—Ä–µ–≤–µ –æ–±–Ω–æ–≤–ª—è–µ–º –±–ª–æ–∫–∏
            if (subPath === 'items' || subPath === '') {
                this.setDirectPath('blocks', value);
            } else {
                this.setDirectPath(`blocks.${subPath}`, value);
            }
        } else {
            // –í —Ä–æ–ª—è—Ö –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏
            if (subPath === 'items' || subPath === '') {
                this.setDirectPath(`roles.${activeTab}.references`, value);
            } else {
                this.setDirectPath(`roles.${activeTab}.${subPath}`, value);
            }
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –ø—Ä—è–º–æ–º—É –ø—É—Ç–∏
     * @param {string} path - –ü—É—Ç—å –∫ –∑–Ω–∞—á–µ–Ω–∏—é
     * @param {*} value - –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
     */
    setDirectPath(path, value) {
        if (!path) {
            this.state = value;
        } else {
            const keys = path.split('.');
            const lastKey = keys.pop();
            
            // –°–æ–∑–¥–∞—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            const target = keys.reduce((obj, key) => {
                if (!obj[key] || typeof obj[key] !== 'object') {
                    obj[key] = {};
                }
                return obj[key];
            }, this.state);
            
            target[lastKey] = value;
        }
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±–ª–æ–∫ (—Ç–æ–ª—å–∫–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –¥–µ—Ä–µ–≤–µ)
     * @param {Object} blockData - –î–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∞
     * @returns {Object} - –°–æ–∑–¥–∞–Ω–Ω—ã–π –±–ª–æ–∫
     */
    createBlock(blockData) {
        const block = {
            id: this.generateId(),
            title: blockData.title || '–ù–æ–≤—ã–π –±–ª–æ–∫',
            content: blockData.content || '',
            tags: blockData.tags || [],
            position: blockData.position || { x: 100, y: 100 },
            createdAt: Date.now(),
            updatedAt: Date.now()
        };
        
        this.update('blocks', blocks => [...blocks, block]);
        
        this.events.emit('block:created', block);
        return block;
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –±–ª–æ–∫ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—é—Ç—Å—è –Ω–∞ –≤—Å–µ —Å—Å—ã–ª–∫–∏)
     * @param {string} blockId - ID –±–ª–æ–∫–∞
     * @param {Object} updates - –û–±–Ω–æ–≤–ª–µ–Ω–∏—è
     * @returns {StateManager}
     */
    updateBlock(blockId, updates) {
        this.update('blocks', blocks =>
            blocks.map(block =>
                block.id === blockId 
                    ? { ...block, ...updates, updatedAt: Date.now() }
                    : block
            )
        );
        
        this.events.emit('block:updated', { id: blockId, updates });
        return this;
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å –±–ª–æ–∫ –∏ –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–µ–≥–æ
     * @param {string} blockId - ID –±–ª–æ–∫–∞
     * @returns {StateManager}
     */
    deleteBlock(blockId) {
        const block = this.get('blocks').find(b => b.id === blockId);
        if (!block) return this;
        
        // –£–¥–∞–ª–∏—Ç—å –±–ª–æ–∫
        this.update('blocks', blocks => blocks.filter(b => b.id !== blockId));
        
        // –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç—Ç–æ—Ç –±–ª–æ–∫ –∏–∑ –≤—Å–µ—Ö —Ä–æ–ª–µ–π
        const roles = this.get('roles');
        Object.keys(roles).forEach(roleId => {
            this.update(`roles.${roleId}.references`, refs =>
                refs.filter(ref => ref.blockId !== blockId)
            );
        });
        
        // –£–¥–∞–ª–∏—Ç—å —Å–≤—è–∑–∏
        this.update('connections', connections =>
            connections.filter(conn => 
                conn.from !== blockId && conn.to !== blockId
            )
        );
        
        this.events.emit('block:deleted', { blockId, block });
        return this;
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –±–ª–æ–∫ –≤ —Ä–æ–ª–∏
     * @param {string} roleId - ID —Ä–æ–ª–∏
     * @param {string} blockId - ID –±–ª–æ–∫–∞
     * @param {Object} position - –ü–æ–∑–∏—Ü–∏—è —Å—Å—ã–ª–∫–∏
     * @returns {Object} - –°–æ–∑–¥–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞
     */
    createReference(roleId, blockId, position) {
        const reference = {
            id: this.generateId(),
            blockId: blockId,
            position: position || { x: 100, y: 100 },
            createdAt: Date.now()
        };
        
        this.update(`roles.${roleId}.references`, refs => [...refs, reference]);
        
        this.events.emit('reference:created', { roleId, blockId, reference });
        return reference;
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é —Å—Å—ã–ª–∫–∏
     * @param {string} roleId - ID —Ä–æ–ª–∏
     * @param {string} referenceId - ID —Å—Å—ã–ª–∫–∏
     * @param {Object} position - –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
     * @returns {StateManager}
     */
    updateReference(roleId, referenceId, position) {
        this.update(`roles.${roleId}.references`, refs =>
            refs.map(ref =>
                ref.id === referenceId
                    ? { ...ref, position }
                    : ref
            )
        );
        
        this.events.emit('reference:updated', { roleId, referenceId, position });
        return this;
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É –∏–∑ —Ä–æ–ª–∏
     * @param {string} roleId - ID —Ä–æ–ª–∏
     * @param {string} referenceId - ID —Å—Å—ã–ª–∫–∏
     * @returns {StateManager}
     */
    deleteReference(roleId, referenceId) {
        const references = this.get(`roles.${roleId}.references`);
        const reference = references.find(ref => ref.id === referenceId);
        
        this.update(`roles.${roleId}.references`, refs =>
            refs.filter(ref => ref.id !== referenceId)
        );
        
        this.events.emit('reference:deleted', { roleId, referenceId, reference });
        return this;
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ä–æ–ª—å
     * @param {Object} roleData - –î–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏
     * @returns {Object} - –°–æ–∑–¥–∞–Ω–Ω–∞—è —Ä–æ–ª—å
     */
    createRole(roleData) {
        const roleId = roleData.id || this.generateId();
        const role = {
            id: roleId,
            name: roleData.name,
            icon: roleData.icon || 'üë§',
            isDefault: false,
            references: [],
            createdAt: Date.now()
        };
        
        this.set(`roles.${roleId}`, role);
        
        this.events.emit('role:created', { roleId, role });
        return role;
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å (—Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ)
     * @param {string} roleId - ID —Ä–æ–ª–∏
     * @returns {StateManager}
     */
    deleteRole(roleId) {
        const role = this.get(`roles.${roleId}`);
        if (!role || role.isDefault) {
            console.warn(`Cannot delete role: ${roleId}`);
            return this;
        }
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –µ—Å–ª–∏ —É–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Ä–æ–ª—å
        if (this.get('ui.activeTab') === roleId) {
            this.set('ui.activeTab', 'main');
        }
        
        // –£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å
        const roles = { ...this.get('roles') };
        delete roles[roleId];
        this.set('roles', roles);
        
        this.events.emit('role:deleted', { roleId, role });
        return this;
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
     * @param {string} tabId - ID –≤–∫–ª–∞–¥–∫–∏ ('main' –∏–ª–∏ roleId)
     * @returns {StateManager}
     */
    switchTab(tabId) {
        const oldTab = this.get('ui.activeTab');
        this.set('ui.activeTab', tabId);
        
        this.events.emit('tab:switched', { from: oldTab, to: tabId });
        return this;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
     * @returns {string} - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
     */
    generateId() {
        return Date.now().toString(36) + Math.random().toString(36).substr(2);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è v2.0
     * @returns {Object} - –û–±—ä–µ–∫—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
     */
    getStats() {
        const blocks = this.get('blocks');
        const roles = this.get('roles');
        const connections = this.get('connections');
        
        const totalReferences = Object.values(roles).reduce(
            (sum, role) => sum + (role.references?.length || 0), 0
        );
        
        return {
            version: this.version,
            historySize: this.history.length,
            maxHistorySize: this.maxHistorySize,
            stateSize: JSON.stringify(this.state).length,
            debugMode: this.debugMode,
            blocks: {
                total: blocks.length,
                withTags: blocks.filter(b => b.tags?.length > 0).length,
                totalCharacters: blocks.reduce((sum, b) => sum + (b.content?.length || 0), 0)
            },
            roles: {
                total: Object.keys(roles).length,
                default: Object.values(roles).filter(r => r.isDefault).length,
                custom: Object.values(roles).filter(r => !r.isDefault).length,
                totalReferences
            },
            connections: {
                total: connections.length
            }
        };
    }

    // –£–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ StateManager
    update(path, updater) {
        if (typeof updater !== 'function') {
            throw new Error('Updater must be a function');
        }
        
        try {
            const currentValue = this.get(path);
            const newValue = updater(currentValue);
            this.set(path, newValue);
        } catch (error) {
            console.error(`‚ùå Error updating state path "${path}":`, error);
        }
        
        return this;
    }

    saveToHistory() {
        const snapshot = JSON.parse(JSON.stringify(this.state));
        this.history.push({
            state: snapshot,
            timestamp: Date.now()
        });
        
        if (this.history.length > this.maxHistorySize) {
            this.history.shift();
        }
    }

    undo(steps = 1) {
        if (this.history.length < steps) {
            console.warn('‚ö†Ô∏è Not enough history to undo');
            return false;
        }
        
        for (let i = 0; i < steps; i++) {
            this.history.pop();
        }
        
        if (this.history.length > 0) {
            const snapshot = this.history[this.history.length - 1];
            this.state = JSON.parse(JSON.stringify(snapshot.state));
            
            this.events.emit('state:restored', {
                timestamp: snapshot.timestamp,
                steps
            });
            
            return true;
        } else {
            this.state = this.getInitialState();
            this.events.emit('state:reset');
            return true;
        }
    }

    clearHistory() {
        this.history = [];
        return this;
    }

    reset() {
        this.state = this.getInitialState();
        this.clearHistory();
        
        this.events.emit('state:reset');
        return this;
    }

    getState() {
        return JSON.parse(JSON.stringify(this.state));
    }

    setState(newState) {
        this.saveToHistory();
        this.state = JSON.parse(JSON.stringify(newState));
        
        this.events.emit('state:replaced', { newState });
        return this;
    }

    setDebug(enabled = true) {
        this.debugMode = enabled;
        this.set('settings.debugMode', enabled);
        console.log(`üêõ State manager debug mode: ${enabled ? 'ON' : 'OFF'}`);
        return this;
    }

    watch(path, callback) {
        const handler = (data) => {
            if (data.path === path || data.path.startsWith(path + '.')) {
                callback(data.value, data.oldValue, data.path);
            }
        };
        
        this.events.on('state:change', handler);
        
        return () => this.events.off('state:change', handler);
    }
}