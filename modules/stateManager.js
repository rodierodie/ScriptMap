/**
 * State Manager v2.0 - –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö —Å –±–ª–æ–∫–∞–º–∏ –∏ —Ä–æ–ª—è–º–∏
 * FIXED: –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ state:replaced –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –∑–∞–º–µ–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
 * –ò–ó–ú–ï–ù–ï–ù–û: –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 */
export class StateManager {
    constructor(events) {
        this.events = events;
        this.state = this.getInitialState();
        this.history = [];
        this.maxHistorySize = 50;
        this.debugMode = false;
        this.version = "2.0";
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è v2.0
     * –ò–ó–ú–ï–ù–ï–ù–û: –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     * @returns {Object} - –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     */
    getInitialState() {
        return {
            version: "2.0",
            
            // –û—Å–Ω–æ–≤–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –±–ª–æ–∫–æ–≤
            blocks: [],
            
            // –†–æ–ª–∏ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –±–ª–æ–∫–∏ (—É–±—Ä–∞–Ω —Ñ–ª–∞–≥ isDefault)
            roles: {
                manager: {
                    id: 'manager',
                    name: '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å',
                    icon: 'üëî',
                    references: [],
                    createdAt: Date.now()
                },
                employee: {
                    id: 'employee', 
                    name: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫',
                    icon: 'üë§',
                    references: [],
                    createdAt: Date.now()
                },
                intern: {
                    id: 'intern',
                    name: '–°—Ç–∞–∂–µ—Ä', 
                    icon: 'üéì',
                    references: [],
                    createdAt: Date.now()
                }
            },
            
            // –°–≤—è–∑–∏ –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏ (–Ω–µ —Å—Å—ã–ª–∫–∞–º–∏!)
            connections: [],
            
            // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ö–æ–ª—Å—Ç–∞ (–æ–±—â–µ–µ –¥–ª—è –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫)
            canvas: {
                transform: { x: 0, y: 0 },
                isDragging: false,
                isPanning: false,
                zoom: 1
            },
            
            // –°–æ—Å—Ç–æ—è–Ω–∏–µ UI
            ui: {
                activeTab: 'main',           // main | roleId
                instructionsVisible: false,
                theme: 'dark',               // –ò–ó–ú–ï–ù–ï–ù–û: —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                paletteOpen: false
            },
            
            // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
            interaction: {
                isSpacePressed: false,
                dragItem: null,              // { type: 'block'|'reference', id: string, roleId?: string }
                dragOffset: { x: 0, y: 0 },
                panStart: { x: 0, y: 0 }
            },
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            settings: {
                autoSave: true,
                debugMode: false,
                version: "2.0"
            }
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –ø—É—Ç–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–∫–ª–∞–¥–æ–∫
     * @param {string} path - –ü—É—Ç—å –∫ –∑–Ω–∞—á–µ–Ω–∏—é
     * @returns {*} - –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ –ø—É—Ç–∏
     */
    get(path) {
        if (!path) return this.state;
        
        try {
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –ø—É—Ç–µ–π
            if (path.startsWith('current.')) {
                return this.getCurrentTabData(path.substring(8));
            }
            
            return path.split('.').reduce((obj, key) => {
                if (obj === null || obj === undefined) return undefined;
                return obj[key];
            }, this.state);
        } catch (error) {
            console.error(`‚ùå Error getting state path "${path}":`, error);
            return undefined;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
     * @param {string} subPath - –ü–æ–¥–ø—É—Ç—å –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
     * @returns {*} - –î–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
     */
    getCurrentTabData(subPath = '') {
        const activeTab = this.get('ui.activeTab');
        
        if (activeTab === 'main') {
            // –í –æ—Å–Ω–æ–≤–Ω–æ–º –¥–µ—Ä–µ–≤–µ —Ä–∞–±–æ—Ç–∞–µ–º —Å –±–ª–æ–∫–∞–º–∏
            if (subPath === 'items' || subPath === '') {
                return this.get('blocks');
            }
            return this.get(`blocks.${subPath}`);
        } else {
            // –í —Ä–æ–ª—è—Ö —Ä–∞–±–æ—Ç–∞–µ–º —Å–æ —Å—Å—ã–ª–∫–∞–º–∏
            const role = this.get(`roles.${activeTab}`);
            if (!role) return undefined;
            
            if (subPath === 'items' || subPath === '') {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –±–ª–æ–∫–æ–≤
                return this.resolveReferences(role.references);
            }
            return role[subPath];
        }
    }

    /**
     * –†–∞–∑—Ä–µ—à–∏—Ç—å —Å—Å—ã–ª–∫–∏ - –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫–æ–≤ –¥–ª—è —Å—Å—ã–ª–æ–∫
     * @param {Array} references - –ú–∞—Å—Å–∏–≤ —Å—Å—ã–ª–æ–∫
     * @returns {Array} - –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –±–ª–æ–∫–æ–≤ –∏ –ø–æ–∑–∏—Ü–∏—è–º–∏ —Å—Å—ã–ª–æ–∫
     */
    resolveReferences(references) {
        const blocks = this.get('blocks');
        
        return references.map(ref => {
            const block = blocks.find(b => b.id === ref.blockId);
            if (!block) {
                console.warn(`‚ö†Ô∏è Reference to missing block: ${ref.blockId}`);
                return null;
            }
            
            return {
                ...block,
                // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
                _reference: {
                    id: ref.id,
                    position: ref.position,
                    createdAt: ref.createdAt,
                    isReference: true
                },
                // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ–∑–∏—Ü–∏–µ–π —Å—Å—ã–ª–∫–∏
                position: ref.position
            };
        }).filter(Boolean);
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–∫–ª–∞–¥–æ–∫
     * @param {string} path - –ü—É—Ç—å –∫ –∑–Ω–∞—á–µ–Ω–∏—é
     * @param {*} value - –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
     * @returns {StateManager} - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç this –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ –≤—ã–∑–æ–≤–æ–≤
     */
    set(path, value) {
        const oldValue = this.get(path);
        
        // –°–æ–∑–¥–∞—Ç—å —Å–Ω–∏–º–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        this.saveToHistory();
        
        try {
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –ø—É—Ç–µ–π
            if (path.startsWith('current.')) {
                this.setCurrentTabData(path.substring(8), value);
            } else {
                this.setNestedValue(path, value);
            }
            
            // –≠–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            this.events.emit('state:change', {
                path,
                value,
                oldValue,
                timestamp: Date.now()
            });
            
            if (this.debugMode) {
                console.log(`üîÑ State changed: ${path} =`, value);
            }
            
        } catch (error) {
            console.error(`‚ùå Error setting state path "${path}":`, error);
        }
        
        return this;
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
     * @param {string} subPath - –ü–æ–¥–ø—É—Ç—å –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
     * @param {*} value - –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
     */
    setCurrentTabData(subPath, value) {
        const activeTab = this.get('ui.activeTab');
        
        if (activeTab === 'main') {
            // –í –æ—Å–Ω–æ–≤–Ω–æ–º –¥–µ—Ä–µ–≤–µ —Ä–∞–±–æ—Ç–∞–µ–º —Å –±–ª–æ–∫–∞–º–∏
            if (subPath === 'items' || subPath === '') {
                this.setNestedValue('blocks', value);
            } else {
                this.setNestedValue(`blocks.${subPath}`, value);
            }
        } else {
            // –í —Ä–æ–ª—è—Ö —Ä–∞–±–æ—Ç–∞–µ–º —Å–æ —Å—Å—ã–ª–∫–∞–º–∏
            if (subPath === 'items' || subPath === '') {
                this.setNestedValue(`roles.${activeTab}.references`, value);
            } else {
                this.setNestedValue(`roles.${activeTab}.${subPath}`, value);
            }
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –ø—É—Ç–∏
     * @param {string} path - –ü—É—Ç—å –∫ –∑–Ω–∞—á–µ–Ω–∏—é (—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–æ—á–∫–∞–º–∏)
     * @param {*} value - –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
     */
    setNestedValue(path, value) {
        if (!path) {
            this.state = value;
            return;
        }
        
        const keys = path.split('.');
        const lastKey = keys.pop();
        
        // –°–æ–∑–¥–∞—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        const target = keys.reduce((obj, key) => {
            if (!obj[key] || typeof obj[key] !== 'object') {
                obj[key] = {};
            }
            return obj[key];
        }, this.state);
        
        target[lastKey] = value;
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±–ª–æ–∫ (—Ç–æ–ª—å–∫–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –¥–µ—Ä–µ–≤–µ)
     * @param {Object} blockData - –î–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∞
     * @returns {Object} - –°–æ–∑–¥–∞–Ω–Ω—ã–π –±–ª–æ–∫
     */
    createBlock(blockData) {
        const block = {
            id: this.generateId(),
            title: blockData.title || '–ù–æ–≤—ã–π –±–ª–æ–∫',
            content: blockData.content || '',
            tags: blockData.tags || [],
            position: blockData.position || { x: 100, y: 100 },
            createdAt: Date.now(),
            updatedAt: Date.now()
        };
        
        this.update('blocks', blocks => [...blocks, block]);
        
        this.events.emit('block:created', block);
        return block;
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –±–ª–æ–∫ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—é—Ç—Å—è –Ω–∞ –≤—Å–µ —Å—Å—ã–ª–∫–∏)
     * @param {string} blockId - ID –±–ª–æ–∫–∞
     * @param {Object} updates - –û–±–Ω–æ–≤–ª–µ–Ω–∏—è
     * @returns {StateManager}
     */
    updateBlock(blockId, updates) {
        this.update('blocks', blocks =>
            blocks.map(block =>
                block.id === blockId 
                    ? { ...block, ...updates, updatedAt: Date.now() }
                    : block
            )
        );
        
        this.events.emit('block:updated', { blockId, updates });
        return this;
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å –±–ª–æ–∫ (–∏ –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–µ–≥–æ)
     * @param {string} blockId - ID –±–ª–æ–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
     * @returns {StateManager}
     */
    deleteBlock(blockId) {
        // –£–¥–∞–ª–∏—Ç—å –±–ª–æ–∫ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞
        this.update('blocks', blocks => blocks.filter(block => block.id !== blockId));
        
        // –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç—Ç–æ—Ç –±–ª–æ–∫ –∏–∑ –≤—Å–µ—Ö —Ä–æ–ª–µ–π
        const roles = this.get('roles');
        Object.keys(roles).forEach(roleId => {
            this.update(`roles.${roleId}.references`, references =>
                references.filter(ref => ref.blockId !== blockId)
            );
        });
        
        // –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–≤—è–∑–∏ —Å —ç—Ç–∏–º –±–ª–æ–∫–æ–º
        this.update('connections', connections =>
            connections.filter(conn => 
                conn.fromBlockId !== blockId && conn.toBlockId !== blockId
            )
        );
        
        this.events.emit('block:deleted', { blockId });
        return this;
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ä–æ–ª—å
     * @param {Object} roleData - –î–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏
     * @returns {Object} - –°–æ–∑–¥–∞–Ω–Ω–∞—è —Ä–æ–ª—å
     */
    createRole(roleData) {
        const role = {
            id: roleData.id || this.generateId(),
            name: roleData.name || '–ù–æ–≤–∞—è —Ä–æ–ª—å',
            icon: roleData.icon || 'üë§',
            references: [],
            createdAt: Date.now()
        };
        
        this.set(`roles.${role.id}`, role);
        
        this.events.emit('role:created', role);
        return role;
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å
     * @param {string} roleId - ID —Ä–æ–ª–∏
     * @param {Object} updates - –û–±–Ω–æ–≤–ª–µ–Ω–∏—è
     * @returns {StateManager}
     */
    updateRole(roleId, updates) {
        const role = this.get(`roles.${roleId}`);
        if (role) {
            this.set(`roles.${roleId}`, { ...role, ...updates });
            this.events.emit('role:updated', { roleId, updates });
        }
        return this;
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å
     * @param {string} roleId - ID —Ä–æ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
     * @returns {StateManager}
     */
    deleteRole(roleId) {
        const role = this.get(`roles.${roleId}`);
        if (!role) return this;
        
        // –£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å
        this.update('roles', roles => {
            const newRoles = { ...roles };
            delete newRoles[roleId];
            return newRoles;
        });
        
        // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º–∞—è —Ä–æ–ª—å –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ–π, –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ –¥–µ—Ä–µ–≤–æ
        if (this.get('ui.activeTab') === roleId) {
            this.set('ui.activeTab', 'main');
        }
        
        this.events.emit('role:deleted', { roleId, role });
        return this;
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –±–ª–æ–∫ –≤ —Ä–æ–ª–∏
     * @param {string} roleId - ID —Ä–æ–ª–∏
     * @param {string} blockId - ID –±–ª–æ–∫–∞
     * @param {Object} position - –ü–æ–∑–∏—Ü–∏—è —Å—Å—ã–ª–∫–∏ {x, y}
     * @returns {Object} - –°–æ–∑–¥–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞
     */
    createReference(roleId, blockId, position) {
        const reference = {
            id: this.generateId(),
            blockId,
            position: position || { x: 100, y: 100 },
            createdAt: Date.now()
        };
        
        this.update(`roles.${roleId}.references`, references => [...references, reference]);
        
        this.events.emit('reference:created', { roleId, blockId, reference });
        return reference;
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É
     * @param {string} roleId - ID —Ä–æ–ª–∏
     * @param {string} referenceId - ID —Å—Å—ã–ª–∫–∏
     * @param {Object} updates - –û–±–Ω–æ–≤–ª–µ–Ω–∏—è
     * @returns {StateManager}
     */
    updateReference(roleId, referenceId, updates) {
        this.update(`roles.${roleId}.references`, references =>
            references.map(ref =>
                ref.id === referenceId ? { ...ref, ...updates } : ref
            )
        );
        
        this.events.emit('reference:updated', { roleId, referenceId, updates });
        return this;
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É
     * @param {string} roleId - ID —Ä–æ–ª–∏
     * @param {string} referenceId - ID —Å—Å—ã–ª–∫–∏
     * @returns {StateManager}
     */
    deleteReference(roleId, referenceId) {
        this.update(`roles.${roleId}.references`, references =>
            references.filter(ref => ref.id !== referenceId)
        );
        
        this.events.emit('reference:deleted', { roleId, referenceId });
        return this;
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å —Å–≤—è–∑—å –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏
     * @param {string} fromBlockId - ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –±–ª–æ–∫–∞
     * @param {string} toBlockId - ID —Ü–µ–ª–µ–≤–æ–≥–æ –±–ª–æ–∫–∞
     * @returns {Object} - –°–æ–∑–¥–∞–Ω–Ω–∞—è —Å–≤—è–∑—å
     */
    createConnection(fromBlockId, toBlockId) {
        const connection = {
            id: this.generateId(),
            fromBlockId,
            toBlockId,
            createdAt: Date.now()
        };
        
        this.update('connections', connections => [...connections, connection]);
        
        this.events.emit('connection:created', connection);
        return connection;
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å —Å–≤—è–∑—å
     * @param {string} connectionId - ID —Å–≤—è–∑–∏
     * @returns {StateManager}
     */
    deleteConnection(connectionId) {
        this.update('connections', connections =>
            connections.filter(conn => conn.id !== connectionId)
        );
        
        this.events.emit('connection:deleted', { connectionId });
        return this;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
     * @returns {string} - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
     */
    generateId() {
        return Date.now().toString(36) + Math.random().toString(36).substr(2);
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –ø—É—Ç–∏ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏
     * @param {string} path - –ü—É—Ç—å –∫ –∑–Ω–∞—á–µ–Ω–∏—é
     * @param {Function} updater - –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     * @returns {StateManager}
     */
    update(path, updater) {
        if (typeof updater !== 'function') {
            throw new Error('Updater must be a function');
        }
        
        try {
            const currentValue = this.get(path);
            const newValue = updater(currentValue);
            this.set(path, newValue);
        } catch (error) {
            console.error(`‚ùå Error updating state path "${path}":`, error);
        }
        
        return this;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
     */
    saveToHistory() {
        const snapshot = JSON.parse(JSON.stringify(this.state));
        this.history.push({
            state: snapshot,
            timestamp: Date.now()
        });
        
        if (this.history.length > this.maxHistorySize) {
            this.history.shift();
        }
    }

    /**
     * –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
     * @param {number} steps - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –Ω–∞–∑–∞–¥
     * @returns {boolean} - –£—Å–ø–µ—à–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è
     */
    undo(steps = 1) {
        if (this.history.length < steps) {
            console.warn('‚ö†Ô∏è Not enough history to undo');
            return false;
        }
        
        for (let i = 0; i < steps; i++) {
            this.history.pop();
        }
        
        if (this.history.length > 0) {
            const snapshot = this.history[this.history.length - 1];
            this.state = JSON.parse(JSON.stringify(snapshot.state));
            
            this.events.emit('state:restored', {
                timestamp: snapshot.timestamp,
                steps
            });
            
            return true;
        } else {
            this.state = this.getInitialState();
            this.events.emit('state:reset');
            return true;
        }
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π
     * @returns {StateManager}
     */
    clearHistory() {
        this.history = [];
        return this;
    }

    /**
     * –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É
     * @returns {StateManager}
     */
    reset() {
        this.state = this.getInitialState();
        this.clearHistory();
        
        this.events.emit('state:reset');
        return this;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     * @returns {Object} - –ö–æ–ø–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    getState() {
        return JSON.parse(JSON.stringify(this.state));
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–ø–æ–ª–Ω–∞—è –∑–∞–º–µ–Ω–∞)
     * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ state:replaced –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π
     * @param {Object} newState - –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     * @returns {StateManager}
     */
    setState(newState) {
        this.saveToHistory();
        this.state = JSON.parse(JSON.stringify(newState));
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –≠–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –æ –ø–æ–ª–Ω–æ–π –∑–∞–º–µ–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.events.emit('state:replaced', { 
            newState: this.state,
            timestamp: Date.now()
        });
        
        console.log('üîÑ State completely replaced');
        
        return this;
    }

    /**
     * –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
     * @param {boolean} enabled - –í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–∫—É
     * @returns {StateManager}
     */
    setDebug(enabled = true) {
        this.debugMode = enabled;
        this.set('settings.debugMode', enabled);
        console.log(`üêõ State manager debug mode: ${enabled ? 'ON' : 'OFF'}`);
        return this;
    }

    /**
     * –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –ø—É—Ç–∏
     * @param {string} path - –ü—É—Ç—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
     * @param {Function} callback - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
     * @returns {Function} - –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø–∏—Å–∫–∏
     */
    watch(path, callback) {
        const handler = (data) => {
            if (data.path === path || data.path.startsWith(path + '.')) {
                callback(data.value, data.oldValue, data.path);
            }
        };
        
        this.events.on('state:change', handler);
        
        return () => this.events.off('state:change', handler);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
     * @returns {Object} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
     */
    getStats() {
        const blocks = this.get('blocks') || [];
        const roles = this.get('roles') || {};
        const connections = this.get('connections') || [];
        
        const totalReferences = Object.values(roles).reduce(
            (sum, role) => sum + (role.references?.length || 0), 0
        );
        
        return {
            version: this.version,
            historySize: this.history.length,
            maxHistorySize: this.maxHistorySize,
            stateSize: JSON.stringify(this.state).length,
            debugMode: this.debugMode,
            currentTheme: this.get('ui.theme') || 'dark', // –î–û–ë–ê–í–õ–ï–ù–û
            blocks: {
                total: blocks.length,
                withTags: blocks.filter(b => b.tags?.length > 0).length,
                totalCharacters: blocks.reduce((sum, b) => sum + (b.content?.length || 0), 0)
            },
            roles: {
                total: Object.keys(roles).length,
                totalReferences
            },
            connections: {
                total: connections.length
            }
        };
    }
}